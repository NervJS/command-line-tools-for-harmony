"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./commands/install"),a=require("./commands/publish"),n=require("./commands/unpublish"),o=require("./commands/uninstall"),t=require("./commands/update"),i=require("./commands/list"),s=require("./common/Constants"),d=require("./commands/config"),r=require("./commands/init"),m=require("./commands/info"),p=require("./commands/ping"),c=require("./commands/script"),l=require("./commands/root"),u=require("./commands/version"),g=require("./commands/cache"),h=require("./core/command/OhpmCommand"),C=require("./commands/clean"),f=require("./commands/dist-tags"),k=require("./commands/prepublish"),y=require("./commands/convert"),P=require("./core/command/types"),O=require("./core/command/commandHandler"),b=h.OhpmCommand.getInstance();b.addSubCommand(b.createSubCmd(P.commands.OHPM_CONFIG).arguments("[action] [key] [value]").usage("[options]").description(`Manage the ${s.Constants.PM} configuration file`).option("set <key> <value>","Set the config key to the provided value").option("get <key>","Print the config value for the provided key").option("delete <key>",`Delete the config key from the ${s.Constants.PmRc} file`).option("list, ls","Display all config settings").option("-j, --json","Output in json format").action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_CONFIG,d.configCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_INFO).arguments("<pkg>").usage("[options] [<@group>/]<pkg>[@<version> | @tag:<tag>]").description("Display the information about a package").addRegistryOptions().addTimeoutOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_INFO,m.infoCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_INIT).description(`Create an ${s.Constants.MyPackageJson} file`).option("-y, --yes",`Create a default ${s.Constants.MyPackageJson} file`).option("-g, --group <group_name>","Create a package with the specified group").action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_INIT,r.initCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_INSTALL).alias("i").arguments("[pkg...]").usage("[options] [[<@group>/]<pkg>[@<version> | @tag:<tag>] ...] | <folder> | <har file>").description("Install package(s)").option("--save-dynamic",`Save package to dynamicDependencies field in ${s.Constants.MyPackageJson}`).option("--save-dev",`Save package to devDependencies field in ${s.Constants.MyPackageJson}`).option("--save-prod",`Save package to dependencies field in ${s.Constants.MyPackageJson}`).option("--no-save",`Do not Save to ${s.Constants.MyPackageJson}`).option("--no-link","Do actual copy instead of symbolic link").option("--all","Install the dependencies of all modules in the project").option("--experimental-concurrently-safe","This is an experimental option for installing the dependencies in concurrently safe mode").option("--target_path <string>","Install packages in the context of the specific target path.").addPrefixOptions().addParameterFileOptions().addRegistryOptions().addTimeoutOptions().addMaxConcurrentOptions().action(((...a)=>(0,O.commandHandler)(P.commands.OHPM_INSTALL,e.installCmd,...a)))).addSubCommand(b.createSubCmd(P.commands.OHPM_LIST).alias("ls").arguments("[<@group>/]<pkg>[@<version>]").description("Display the dependency tree").option("-d, --depth <number>","Specify the max depth of the dependency tree").option("-j, --json","Output in json format").option("--no-link",'If the packages were installed by "--no-link" option then they can only be listed with this option').addPrefixOptions().addParameterFileOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_LIST,i.listCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_PING).description("Test the network connectivity to registry").addRegistryOptions().addTimeoutOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_PING,p.pingCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_PREPUBLISH).arguments("<har_or_tgz_file>").description("Pre-verification package content").action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_PREPUBLISH,k.prePublishCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_PUBLISH).arguments("<har_or_tgz_file>").description("Publish a package to the registry").option("-t, --tag <tag_name>","Add the specified tag to the current version of the package when publishing").option("--publish_registry <r>","Specify the registry when publishing a package").option("--publish_id <id>","Specify the publish id generated by registry for user").option("--key_path <p>",'The private ssh key path correspondent to the "publish_id"').addTimeoutOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_PUBLISH,a.publishCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_UNINSTALL).alias("un").arguments("<pkg...>").usage("[options] [<@group>/]<pkg>...").description("Uninstall package(s)").option("--no-save",`Do not save to ${s.Constants.MyPackageJson}`).option("--all","Uninstall a package in current module and install the dependencies of all modules in the project").option("--experimental-concurrently-safe","This is an experimental option for installing the dependencies in concurrently safe mode").addPrefixOptions().addRegistryOptions().addTimeoutOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_UNINSTALL,o.uninstallCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_UNPUBLISH).arguments("[<@group>/]<pkg>[@<version>]").description("Unpublish a package from target registry").option("-f, --force","Unpublish all versions of package without a specified version").option("--publish_registry <r>","Specify the registry when unpublishing package").option("--publish_id <id>","Specify the publish id generated by registry for user").option("--key_path <p>",'The private key path correspondent to the "publish_id"').addTimeoutOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_UNPUBLISH,n.unPublishCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_UPDATE).alias("up").arguments("[pkg...]").usage("[options] [[<@group>/]<pkg> ...]").description("Update package(s) to their latest version based on the specified range").option("--all","Update a package or all dependencies in current module and install the dependencies of all modules in the project").option("--all-modules","Update a package or all dependencies in all modules").option("--tag-filter <regex>","Update the dependencies that use tag as the specification and whose tag comply with the regular expression specified by tag-filter").option("--experimental-concurrently-safe","This is an experimental option for installing the dependencies in concurrently safe mode").addPrefixOptions().addRegistryOptions().addTimeoutOptions().addMaxConcurrentOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_UPDATE,t.updateCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_ROOT).description(`Print the effective ${s.Constants.MyModules} folder to standard out`).addPrefixOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_ROOT,l.rootCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_VERSION).arguments("[action]").usage("[options] [<newversion> | major | minor | patch]").description("Bump a package version").addPrefixOptions().addParameterFileOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_VERSION,u.versionCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_CACHE).arguments("[action]").usage("[options]").option("clean",`Clean the ${s.Constants.PM} cache folder`).description(`Manage the ${s.Constants.PM} cache folder`).action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_CACHE,g.cacheCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_SCRIPT).arguments("<alias> [args...]").usage("[options] <alias> [-- <args...>]").description("Run user defined package scripts, the optional parameter 'args' is used to append \nor override script parameters in the form '(-key/--key value), (-key/--key=value), (-key/--key=a=b)'").addPrefixOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_SCRIPT,c.scriptCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_CLEAN).alias("cls").usage("[options]").description(`Delete all '${s.Constants.MyModules}' directories and the '${s.Constants.LockJson}' file in the current project`).option("-kl, --keep-lockfile",`Do not delete the '${s.Constants.LockJson}' file`).action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_CLEAN,C.cleanCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_DIST_TAGS).alias("dist-tag").arguments("[action] [<@group>/]<pkg>[@<version>] [tag]").allowExcessArguments(!1).usage("[subcommand] [<@group>/]<pkg>[@<version>] <tag>").description("Manage version tags of package").option("add [<@group>/]<pkg>[@<version>] <tag>","Add a tag to a package version").option("remove [<@group>/]<pkg> <tag>, rm [<@group>/]<pkg> <tag>","Remove a tag from a package").option("update [<@group>/]<pkg>[@<version>] <tag>, up [<@group>/]<pkg>[@<version>] <tag>","Update a tag to a new package version").option("list [<@group>/]<pkg>, ls [<@group>/]<pkg>","Display all tags for a package").option("--publish_registry <r>","Specify the registry when adding, removing or updating tag for a package").option("--publish_id <id>","Specify the publish id generated by registry for user").option("--key_path <p>",'The private ssh key path correspondent to the "publish_id"').addTimeoutOptions().addRegistryOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_DIST_TAGS,f.distTagsCmd,...e)))).addSubCommand(b.createSubCmd(P.commands.OHPM_CONVERT).arguments("[<@group>/]<pkg>[@<version>]|<node_modules_path>").allowExcessArguments(!1).usage("[options] [<@group>/]<pkg>[@<version> | @tag:<tag>] | <node_modules_path>").description(`Convert all the packages to the ${s.Constants.PM} packages`).option("--publish","Publish all the converted packages to the publish_registry").addRegistryOptions().action(((...e)=>(0,O.commandHandler)(P.commands.OHPM_CONVERT,y.convertCmd,...e)))).startParse();