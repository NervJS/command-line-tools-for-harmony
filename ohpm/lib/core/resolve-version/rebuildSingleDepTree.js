"use strict";var e=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function u(e){try{c(i.next(e))}catch(e){r(e)}}function l(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,l)}c((i=i.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.rebuildSingleDepTree=void 0;const n=t(require("../../log")),i=require("../dependency/tree-builder/AsyncTreeBuilder"),o=require("../install/service/updateCommandLineInputDependencies"),r=require("../install/service/handleCliInput");exports.rebuildSingleDepTree=function(t){return e(this,void 0,void 0,(function*(){n.default.debug("conflictResolve",`rebuilding tree to resolve conflict, roughListSize: ${t.roughDepList.length}, rootDir: "${t.moduleRootDir}".`);const e=Date.now();(0,o.updateCommandLineInputDependencies)(t,r.cliInputNames);const u=new i.AsyncTreeBuilder({resolveConflict:!0});return yield u.build(t.moduleRootDir,t.root),t=u.getResult(),n.default.debug("conflictResolve",`resolve conflict success. finalListSize: ${t.finalDepList.length}, rootDir: "${t.moduleRootDir}"`),function(e,t){const i=(new Date).getTime()-e,o=Math.floor(i/1e3),r=i%1e3,u=t?`${t}`:"";n.default.debug("conflictResolve",`${u} completed in ${o}s ${r}ms`)}(e),t}))};