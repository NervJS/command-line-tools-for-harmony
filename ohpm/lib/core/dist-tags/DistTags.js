"use strict";var t=this&&this.__awaiter||function(t,i,e,s){return new(e||(e=Promise))((function(r,a){function n(t){try{g(s.next(t))}catch(t){a(t)}}function o(t){try{g(s.throw(t))}catch(t){a(t)}}function g(t){var i;t.done?r(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(n,o)}g((s=s.apply(t,i||[])).next())}))},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistTags=void 0;const e=require("../dependency/dep-fetcher"),s=i(require("../../log")),r=require("../../util"),a=require("./DistTagsApiFactory"),n=require("../../config"),o=require("../registry/registry"),g=require("./types"),u=require("./DistTagsValidator"),d=require("../../common/message"),h=require("../../common/Constants");exports.DistTags=class{get pkgName(){return this._pkgName}get version(){return this._version}get tag(){return this._tag}get publishRegistry(){return this._publishRegistry}constructor(t,i,e){const{pkgName:s,version:r}=this.parsePkg(t);this._pkgName=s,this._version=r,this._publishRegistry=this.getPublishRegistry(e),i&&(u.DistTagsValidator.validTag(i),this._tag=i)}add(){return t(this,void 0,void 0,(function*(){u.DistTagsValidator.validApiCommand(g.DistTagsSubCommand.ADD,this);const t=yield a.DistTagsApiFactory.getDistTagsApi(this._publishRegistry);yield t.add(this._pkgName,this._version,this._tag)}))}update(){return t(this,void 0,void 0,(function*(){u.DistTagsValidator.validApiCommand(g.DistTagsSubCommand.UPDATE,this);const t=yield a.DistTagsApiFactory.getDistTagsApi(this._publishRegistry);yield t.update(this._pkgName,this._version,this._tag)}))}remove(){return t(this,void 0,void 0,(function*(){u.DistTagsValidator.validApiCommand(g.DistTagsSubCommand.REMOVE,this);const t=yield a.DistTagsApiFactory.getDistTagsApi(this._publishRegistry);yield t.remove(this._pkgName,this._tag)}))}list(){return t(this,void 0,void 0,(function*(){if(!this._pkgName||this._tag)throw new Error(d.Messages.DistTags.ListCommandParamError);s.default.setup("warn");const t=new e.RegistryMetaDataFetcherImpl,i=(yield t.fetchMetaDataFromRegistry(this._pkgName,""))["dist-tags"];let a=Object.keys(i||{});if(0===a.length)return void s.default.warn("",`The package ${this._pkgName} is not associated with any tag.`);const n=a.indexOf(h.Constants.LATEST);if(n>-1){const t=a.splice(n,1);a=[...t,...a.sort()]}else a=a.sort();let o="";a.forEach((t=>o+=`${t}: ${i[t]}\n`)),r.PrintUtil.print(o)}))}parsePkg(t){let i,e;if(t){const s="@"===t[0]?t.slice(1).indexOf("@")+1:t.indexOf("@");i=s>0?t.slice(0,s):t,u.DistTagsValidator.validPkgName(i),s>0&&(e=t.slice(s+1))}return{pkgName:i,version:e}}getPublishRegistry(t){if(t)return(0,o.formatRegistry)(t);const i=n.config.getString(n.types.PUBLISH_REGISTRY);return i?(0,o.formatRegistry)(i):""}};