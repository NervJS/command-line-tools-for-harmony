"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ValidationConfigChecker=void 0;const t=require("./types"),r=e(require("../../../log")),a=require("../../../common/message");class i{static checkConfig(e){if(!e.attrName)throw new Error((0,a.format)(a.Messages.Validator.ConfigEmptyError,{attrName:"attrName"}));const t=e.configs;if(!Array.isArray(t)){const t=`check rule of "${e.attrName}" - typeof "configs" is not array`;throw r.default.error("",t),new Error((0,a.format)(a.Messages.Validator.RuleTypeError,{attrName:`${e.attrName}`}))}t.forEach((e=>{i.checkRuleConfig(e)}))}static checkRuleConfig(e){const t=this.ruleTypeCheckerMap.get(e.ruleType);if(!t)throw r.default.error("",`invalid RuleType: "${e.ruleType}".`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"RuleType"}));t(e.ruleContent)}static regExpTypeCheck(e){try{new RegExp(e)}catch(t){throw r.default.error("",`check ruleContent failed. Invalid RegExpRule: "${e}".`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"RegExp"}))}}static whiteListTypeCheck(e){if("string"!=typeof e||!/^([a-zA-Z_]+;)*([a-zA-Z_]+)?$/.test(e))throw r.default.error("",`check ruleContent failed. Invalid WhiteListRule: "${e}"`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"WhiteList"}))}static lengthLimitTypeCheck(e){if(e.maxLength<0&&e.minLength<0)throw r.default.error("",`check ruleContent failed. Invalid LengthLimitRule: "${e}"`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"ItemLengthLimitRule"}))}static notNullTypeCheck(e){if(e)throw r.default.error("",`check ruleContent failed. Invalid NotNullRule: "${e}"`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"NotNullRule"}))}static MapEntryTypeCheck(e){const t=e.keyRuleConfig,r=e.valueRuleConfig;i.checkRuleConfig(t),i.checkRuleConfig(r)}static CustomFunctionCheck(e){if("string"!=typeof e)throw r.default.error("",`check ruleContent failed. Invalid CustomFunctionRule: "${e}"`),new Error((0,a.format)(a.Messages.Validator.InvalidRuleError,{ruleName:"CustomFunction"}))}}exports.ValidationConfigChecker=i,i.ruleTypeCheckerMap=new Map([[t.ValidationRuleType.RegExp,i.regExpTypeCheck],[t.ValidationRuleType.NotNull,i.notNullTypeCheck],[t.ValidationRuleType.WhiteList,i.whiteListTypeCheck],[t.ValidationRuleType.LengthLimit,i.lengthLimitTypeCheck],[t.ValidationRuleType.ListItemLengthLimit,i.lengthLimitTypeCheck],[t.ValidationRuleType.MapEntry,i.MapEntryTypeCheck],[t.ValidationRuleType.CustomFunction,i.CustomFunctionCheck]]);