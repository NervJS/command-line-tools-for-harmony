"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ValidationRuleFactory=exports.ValidationRuleHandlerFactory=void 0;const t=require("./handler"),r=require("./rule"),n=require("./rule/ListItemLengthLimit"),i=require("./rule/CustomFunctionRule"),a=require("./customValidateFunc/customValidateFuncMap"),u=e(require("../../log")),l=require("../../common/message");exports.ValidationRuleHandlerFactory=class{static createHandler(e,r){const n=e.configs,i=new t.BaseRuleHandler;let a=i;for(const e of n){const n=o.createRule(e,r),i=new t.BaseRuleHandler(n);a.setNext(i),a=i}return i}};class o{static createRule(e,t){switch(e.ruleType){case r.ValidationRuleType.RegExp:return new r.RegExpRule(new RegExp(e.ruleContent),t);case r.ValidationRuleType.NotNull:return new r.NotNullRule(t);case r.ValidationRuleType.LengthLimit:return this.createLengthLimitRule(e.ruleContent,t);case r.ValidationRuleType.WhiteList:return this.createWhiteListRule(e.ruleContent,t);case r.ValidationRuleType.MapEntry:return this.createMapEntryRule(e.ruleContent,t);case r.ValidationRuleType.ListItemLengthLimit:return this.createItemLengthLimitRule(e.ruleContent,t);case r.ValidationRuleType.CustomFunction:return this.createCustomFunctionRule(e.ruleContent,t);default:throw u.default.error("",`unknown ValidationRuleType: ${e.ruleType}.`),new Error(l.Messages.Validator.UnknownError)}}static createLengthLimitRule(e,t){const n=e.minLength?e.minLength:0,i=e.maxLength?e.maxLength:0;return new r.LengthLimitRule(i,n,t)}static createWhiteListRule(e,t){let n=e.trim();n=n.replace(/;$/gi,"");const i=n.split(";");if(!Array.isArray(i))throw u.default.error("",`invalid ruleContent: "${e}" when createWhiteListRule.`),new Error(l.Messages.Validator.UnknownError);return new r.WhiteListRule(i,t)}static createMapEntryRule(e,t){const n=o.createRule(e.keyRuleConfig,t),i=o.createRule(e.valueRuleConfig,t);return new r.MapEntryRule(n,i,t)}static createItemLengthLimitRule(e,t){const r=e.minLength?e.minLength:0,i=e.maxLength?e.maxLength:0;return new n.ListItemLengthLimitRule(i,r,t)}static createCustomFunctionRule(e,t){const r=e.split(";"),n=[];return r.forEach((e=>n.push(a.customValidateFuncMap.get(e)))),new i.CustomFunctionRule(n,t)}}exports.ValidationRuleFactory=o;