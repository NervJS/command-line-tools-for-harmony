"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.conflictVersionAlarm=void 0;const o=require("../locker"),r=e(require("../../log")),t=require("../../tools/posh"),n="Found version conflict(s) in dependencies of project";exports.conflictVersionAlarm=function(e){const a=new Map;return{recordData:a,recordConflictMessage:e=>{const r=o.PackageLockerManager.getInstance();e.roughDepList.forEach((o=>{if(o.isRoot)return;if(o.isNativeSoType)return;const t=r.getFetchSpecSet(o.name);let n;if(t.size>1)if(a.has(o.name))n=a.get(o.name),n.whichModules.add(e.moduleRootDir);else{const s=r.getMaxSatisfyingVersionData(o.name);n={packageName:o.name,whichModules:new Set([e.moduleRootDir]),versionSet:t,resolvedVersion:s.pinnedSpec},a.set(o.name,n)}}))},alarmConflictMessage:o=>{if(o)return;let s=n;e&&(s=`${n}, and we have helped you resolve it automatically.`),a.size>0&&(r.default.log("warn",`${t.posh.bold.bgBlack.yellowBright(s)}`),a.forEach((o=>{return t=o,n=e,void r.default.warn("",`dependency "${t.packageName}" has conflict versions: "${Array.from(t.versionSet).sort().join('", "')}",`+(n?` and has been resolved as "${t.resolvedVersion}",`:"")+" the affected modules are as follows:\n"+`\t - "${Array.from(t.whichModules).sort().join('"\n\t - "')}"\n`);var t,n})))}}};