"use strict";var e=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function i(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,i)}u((n=n.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getFilePathHash=void 0;const r=require("../../../common/Constants"),n=require("../../../common/message"),s=require("../../../util/FsUtil"),o=t(require("crypto")),a=t(require("../../../log")),i=new Map;exports.getFilePathHash=function(t){return e(this,void 0,void 0,(function*(){const e=r.Constants.compressConfig;if(!t||!e.ALGORITHM)throw new Error(n.Messages.Path.NotFoundPathOrAlg);if(i.get(t))return i.get(t);if((t=s.FsUtil.slash(t)).length<=e.PATH_LEN)return i.set(t,t),t;try{let r;const n=o.default.createHash(e.ALGORITHM).update(t);return!e.ENCODING||"base64"!==e.ENCODING&&"base64url"!==e.ENCODING&&"binary"!==e.ENCODING?(a.default.debug("","pathHash, encoding empty or invalid in pathCompress."),r=n.digest("hex")):r=n.digest(e.ENCODING),r=e.TO_UPPER_CASE?r.toUpperCase():r.toLowerCase(),i.set(t,r),r}catch(e){throw new Error((0,n.format)(n.Messages.Path.PathHashFailed,{msg:(null==e?void 0:e.message)||e}))}}))};