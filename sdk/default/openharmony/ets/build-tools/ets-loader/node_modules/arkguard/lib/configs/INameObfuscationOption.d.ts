import type { NameGeneratorType } from '../generator/NameFactory';
export interface INameObfuscationOption {
    readonly mEnable: boolean;
    readonly mNameGeneratorType?: NameGeneratorType;
    readonly mRenameProperties: boolean;
    mReservedNames?: string[];
    mReservedProperties: string[];
    mUniversalReservedProperties?: RegExp[];
    readonly mDictionaryList?: string[];
    readonly mKeepStringProperty?: boolean;
    readonly mTopLevel?: boolean;
    mReservedToplevelNames?: string[];
    mUniversalReservedToplevelNames?: RegExp[];
}
export interface IFileNameObfuscationOption {
    readonly mEnable: boolean;
    readonly mNameGeneratorType: NameGeneratorType;
    mReservedFileNames: string[];
    mUniversalReservedFileNames?: RegExp[];
    readonly mOhmUrlStatus?: OhmUrlStatus;
}
export interface IDeclarationCommentOption {
    readonly mEnable: boolean;
    mReservedComments: string[];
    mUniversalReservedComments?: RegExp[];
}
export declare enum OhmUrlStatus {
    NONE = 0,
    AT_BUNDLE = 1,
    NORMALIZED = 2
}
export interface IPrinterOption {
    readonly mFilesPrinter?: boolean;
    readonly mSingleFilePrinter?: boolean;
    readonly mSumPrinter?: boolean;
    readonly mOutputPath?: string;
}
/**
 * It records which files cannot be obfuscated (except for file name obfuscation) and their dependent files.
 * The names and properties exported in the dependent files are put into the whitelist.
 */
export interface IKeepSourcePathsAndDependency {
    mKeepSourceOfPaths: Set<string>;
    mkeepFilesAndDependencies: Set<string>;
}
export interface IUnobfuscationOption {
    mPrintKeptNames: boolean;
    mPrintPath: string;
}
