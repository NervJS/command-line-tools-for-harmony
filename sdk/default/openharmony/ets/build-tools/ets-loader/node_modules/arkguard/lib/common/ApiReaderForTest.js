"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readProjectProperties = void 0;
const ApiReader_1 = require("./ApiReader");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * Recursive retrieval of all subfile paths within a folder
 * @param dir - Folder path to traverse
 * @returns returns an array of all subfile paths
 */
function getAllFiles(inputPaths) {
    let results = new Set();
    for (let inputPath of inputPaths) {
        const stat = fs_1.default.statSync(inputPath);
        if (stat.isDirectory()) {
            getAllFilesInDirRecursively(inputPath, results);
        }
        else if (stat.isFile()) {
            results.add(inputPath);
        }
    }
    return results;
}
function getAllFilesInDirRecursively(dir, results) {
    const list = fs_1.default.readdirSync(dir);
    list.forEach((file) => {
        const filePath = path_1.default.join(dir, file);
        const stat = fs_1.default.statSync(filePath);
        if (stat && stat.isDirectory()) {
            getAllFilesInDirRecursively(filePath, results);
        }
        else {
            results.add(filePath);
        }
    });
}
/**
 * read project reserved properties for UT
 * @param projectPaths can be dir or file
 * @param customProfiles
 */
function readProjectProperties(projectPaths, customProfiles, arkObfuscator) {
    const allPaths = getAllFiles(projectPaths);
    let projectAndLibs = (0, ApiReader_1.readProjectPropertiesByCollectedPaths)(allPaths, customProfiles, false);
    if (customProfiles.mNameObfuscation.mRenameProperties) {
        arkObfuscator.addReservedSetForPropertyObf(projectAndLibs);
    }
    if (customProfiles.mExportObfuscation) {
        arkObfuscator.addReservedSetForDefaultObf(projectAndLibs);
    }
}
exports.readProjectProperties = readProjectProperties;
//# sourceMappingURL=ApiReaderForTest.js.map