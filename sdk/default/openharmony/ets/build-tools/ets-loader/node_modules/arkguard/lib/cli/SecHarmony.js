#!/usr/bin/env node
"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const path = __importStar(require("path"));
const ArkObfuscatorForTest_1 = require("../ArkObfuscatorForTest");
const ArkObfuscator_1 = require("../ArkObfuscator");
const PrinterUtils_1 = require("../utils/PrinterUtils");
const UnitTestUtil_1 = require("../utils/UnitTestUtil");
const FileUtils_1 = require("../utils/FileUtils");
/**
 * Main Entry of Obfuscation in
 */
const minParametersNum = 3;
(function () {
    var _a, _b, _c;
    if (process.argv.length < minParametersNum) {
        console.error('Too few input parameters.');
        console.error('Usage: SecHarmony [input files] [options]');
        return;
    }
    initOptionsSetting();
    let configPath = (_a = commander_1.program.opts()) === null || _a === void 0 ? void 0 : _a.configPath;
    configPath = path.resolve(configPath);
    let fileList = [];
    commander_1.program.args.forEach((value) => {
        const resolved = path.resolve(value);
        fileList.push(resolved);
    });
    let obfuscator = new ArkObfuscatorForTest_1.ArkObfuscatorForTest(fileList, configPath);
    (0, PrinterUtils_1.startFilesEvent)(PrinterUtils_1.EventList.OBFUSCATION_INITIALIZATION, ArkObfuscator_1.performancePrinter.timeSumPrinter);
    const config = FileUtils_1.FileUtils.readFileAsJson(configPath);
    const initSuccess = obfuscator.init(config);
    let inplace = (_b = commander_1.program.opts()) === null || _b === void 0 ? void 0 : _b.inplace;
    if (inplace) {
        obfuscator.setWriteOriginalFile(true);
    }
    let testType = (_c = commander_1.program.opts()) === null || _c === void 0 ? void 0 : _c.testType;
    obfuscator.setTestType(testType);
    UnitTestUtil_1.UnitTestUtil.initKeepPathConfig(obfuscator.customProfiles, obfuscator.configPath);
    (0, PrinterUtils_1.endFilesEvent)(PrinterUtils_1.EventList.OBFUSCATION_INITIALIZATION, ArkObfuscator_1.performancePrinter.timeSumPrinter);
    if (!initSuccess) {
        console.error('init from config file error.');
        return;
    }
    obfuscator.obfuscateFiles();
})();
function initOptionsSetting() {
    commander_1.program.name('SecHarmony')
        .version('1.0.0')
        .description('A tool to obfuscate open harmony application written by Javascript or Typescript.')
        .usage('Usage: SecHarmony [input files] [options]')
        .option('-v, --version', 'show version information.')
        .option('--inplace', 'write the ofuscated content to the original file')
        .option('--test-type <type>', 'Indicates the type of test case, must be either "grammar" or "combinations"')
        .option('-cp, --config-path <dir>', 'obfuscation configuration for open harmony application.')
        .parse();
}
//# sourceMappingURL=SecHarmony.js.map