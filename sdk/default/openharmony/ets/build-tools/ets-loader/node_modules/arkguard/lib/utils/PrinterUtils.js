"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTimeSumData = exports.printTimeSumInfo = exports.endFilesEvent = exports.startFilesEvent = exports.endSingleFileEvent = exports.startSingleFileEvent = exports.blockPrinter = exports.initPerformancePrinter = exports.TimeSumPrinter = exports.TimeTracker = exports.eventList = exports.EventIndentation = exports.EventList = void 0;
const fs = __importStar(require("fs"));
const ArkObfuscator_1 = require("../ArkObfuscator");
var EventList;
(function (EventList) {
    EventList["OBFUSCATION_INITIALIZATION"] = "Obfuscation initialization";
    EventList["SCAN_SYSTEMAPI"] = "Scan system api";
    EventList["SCAN_SOURCEFILES"] = "Scan source files";
    EventList["ALL_FILES_OBFUSCATION"] = "All files obfuscation";
    EventList["OBFUSCATE"] = "Obfuscate";
    EventList["CREATE_AST"] = "Create AST";
    EventList["OBFUSCATE_AST"] = "Obfuscate AST";
    EventList["VIRTUAL_CONSTRUCTOR_OBFUSCATION"] = "Virtual constructor obfuscation";
    EventList["SHORT_HAND_OBFUSCATION"] = "Shorthand obfuscation";
    EventList["REMOVE_CONSOLE"] = "Remove console";
    EventList["PROPERTY_OBFUSCATION"] = "Property obfuscation";
    EventList["IDENTIFIER_OBFUSCATION"] = "Identifier obfuscation";
    EventList["CREATE_CHECKER"] = "Create checker";
    EventList["CREATE_PROGRAM"] = "Create program";
    EventList["GET_CHECKER"] = "Get checker";
    EventList["SCOPE_ANALYZE"] = "Scope analyze";
    EventList["CREATE_OBFUSCATED_NAMES"] = "Create obfuscated names";
    EventList["OBFUSCATE_NODES"] = "Obfuscate nodes";
    EventList["FILENAME_OBFUSCATION"] = "Filename obfuscation";
    EventList["CREATE_PRINTER"] = "Create Printer";
    EventList["GET_SOURCEMAP_GENERATOR"] = "Get sourcemap generator";
    EventList["SOURCEMAP_MERGE"] = "Sourcemap merge";
    EventList["CREATE_NAMECACHE"] = "Create namecache";
    EventList["WRITE_FILE"] = "Write file";
})(EventList = exports.EventList || (exports.EventList = {}));
var EventIndentation;
(function (EventIndentation) {
    EventIndentation[EventIndentation["FOURSPACE"] = 4] = "FOURSPACE";
    EventIndentation[EventIndentation["THREESPACE"] = 3] = "THREESPACE";
    EventIndentation[EventIndentation["TWOSPACE"] = 2] = "TWOSPACE";
    EventIndentation[EventIndentation["ONESPACE"] = 1] = "ONESPACE";
    EventIndentation[EventIndentation["NOSPACE"] = 0] = "NOSPACE";
})(EventIndentation = exports.EventIndentation || (exports.EventIndentation = {}));
;
exports.eventList = new Map([
    [EventList.OBFUSCATION_INITIALIZATION, EventIndentation.ONESPACE],
    [EventList.SCAN_SYSTEMAPI, EventIndentation.TWOSPACE],
    [EventList.SCAN_SOURCEFILES, EventIndentation.ONESPACE],
    [EventList.ALL_FILES_OBFUSCATION, EventIndentation.ONESPACE],
    [EventList.OBFUSCATE, EventIndentation.ONESPACE],
    [EventList.CREATE_AST, EventIndentation.TWOSPACE],
    [EventList.OBFUSCATE_AST, EventIndentation.TWOSPACE],
    [EventList.VIRTUAL_CONSTRUCTOR_OBFUSCATION, EventIndentation.THREESPACE],
    [EventList.SHORT_HAND_OBFUSCATION, EventIndentation.THREESPACE],
    [EventList.REMOVE_CONSOLE, EventIndentation.THREESPACE],
    [EventList.PROPERTY_OBFUSCATION, EventIndentation.THREESPACE],
    [EventList.IDENTIFIER_OBFUSCATION, EventIndentation.THREESPACE],
    [EventList.CREATE_CHECKER, EventIndentation.THREESPACE],
    [EventList.CREATE_PROGRAM, EventIndentation.FOURSPACE],
    [EventList.GET_CHECKER, EventIndentation.FOURSPACE],
    [EventList.SCOPE_ANALYZE, EventIndentation.THREESPACE],
    [EventList.CREATE_OBFUSCATED_NAMES, EventIndentation.THREESPACE],
    [EventList.OBFUSCATE_NODES, EventIndentation.THREESPACE],
    [EventList.FILENAME_OBFUSCATION, EventIndentation.THREESPACE],
    [EventList.CREATE_PRINTER, EventIndentation.TWOSPACE],
    [EventList.GET_SOURCEMAP_GENERATOR, EventIndentation.TWOSPACE],
    [EventList.SOURCEMAP_MERGE, EventIndentation.TWOSPACE],
    [EventList.CREATE_NAMECACHE, EventIndentation.TWOSPACE],
    [EventList.WRITE_FILE, EventIndentation.ONESPACE]
]);
const MILLISECOND_TO_SECOND = 1000;
const BYTE_TO_MB = 1024 * 1024;
const SIG_FIGS = 3; // Significant figures
const INDENT = '    ';
const DEFAULT_DEPTH = 2; // Default indent length
class BasePrinter {
    disablePrinter() {
        this.enablePrinter = false;
    }
    /**
     * Only for ut
     */
    isEnabled() {
        return this.enablePrinter;
    }
    constructor(outputPath = '') {
        this.enablePrinter = true;
        this.outputPath = outputPath;
    }
    setOutputPath(outputPath) {
        this.outputPath = outputPath;
    }
    print(message) {
        if (this.outputPath && this.outputPath !== '') {
            fs.appendFileSync(`${this.outputPath}`, message + '\n');
        }
        else {
            console.log(message);
        }
    }
    outputData() {
        const eventData = this.getCurrentEventData();
        this.print(eventData);
    }
    // Only used for ut
    getOutputPath() {
        return this.outputPath;
    }
}
class TimeTracker extends BasePrinter {
    constructor() {
        super(...arguments);
        this.eventStack = new Map();
        this.filesTimeSum = 0;
        this.maxTimeUsage = 0;
        this.maxTimeFile = '';
        this.maxMemoryUsage = 0;
        this.maxMemoryFile = '';
    }
    startEvent(eventName, timeSumPrinter, currentFile) {
        this.eventStack.set(eventName, { start: Date.now(), duration: 0, startMemory: process.memoryUsage().heapUsed,
            endMemory: 0, memoryUsage: 0, filePath: currentFile });
        timeSumPrinter === null || timeSumPrinter === void 0 ? void 0 : timeSumPrinter.addEventDuration(eventName, 0);
    }
    endEvent(eventName, timeSumPrinter, isFilesPrinter, triggerSingleFilePrinter) {
        if (!this.eventStack.get(eventName)) {
            throw new Error(`Event "${eventName}" not started`);
        }
        const eventStartTime = this.eventStack.get(eventName).start;
        const duration = (Date.now() - eventStartTime) / MILLISECOND_TO_SECOND;
        const eventEndMemory = process.memoryUsage().heapUsed;
        const eventStartMemory = this.eventStack.get(eventName).startMemory;
        const memoryUsage = eventEndMemory - eventStartMemory;
        if (isFilesPrinter) {
            this.filesTimeSum += duration;
            if (duration > this.maxTimeUsage) {
                this.maxTimeUsage = duration;
                this.maxTimeFile = eventName;
            }
            if (eventStartMemory > this.maxMemoryUsage) {
                this.maxMemoryUsage = eventStartMemory;
                this.maxMemoryFile = eventName;
            }
            if (eventEndMemory > this.maxMemoryUsage) {
                this.maxMemoryUsage = eventEndMemory;
                this.maxMemoryFile = eventName;
            }
        }
        this.eventStack.get(eventName).duration = duration;
        this.eventStack.get(eventName).endMemory = eventEndMemory;
        this.eventStack.get(eventName).memoryUsage = memoryUsage;
        timeSumPrinter === null || timeSumPrinter === void 0 ? void 0 : timeSumPrinter.addEventDuration(eventName, duration);
        // Output data of singleFilePrinter if it is enabled and triggered
        if (triggerSingleFilePrinter && this.enablePrinter) {
            this.outputData();
        }
        // Output data of filesPrinter if it is enabled and triggered
        if ((eventName === EventList.ALL_FILES_OBFUSCATION)) {
            this.eventStack.get(eventName).duration = this.filesTimeSum;
            if (this.enablePrinter) {
                this.outputData();
            }
            const totalTimeUsage = this.getTotalTime();
            const maxTimeUsage = this.maxTimeUsage.toFixed(SIG_FIGS);
            const maxMemoryUsage = (this.maxMemoryUsage / BYTE_TO_MB).toFixed(SIG_FIGS);
            this.print(`Obfuscation time cost: ${totalTimeUsage} s`);
            this.print(`Max time cost of single file: ${this.maxTimeFile}: ${maxTimeUsage} s`);
            this.print(`Max memory usage of single file: ${this.maxMemoryFile}: ${maxMemoryUsage}MB\n`);
        }
    }
    getCurrentEventData() {
        var _a;
        let eventData = '';
        for (const eventName of this.eventStack.keys()) {
            if (eventName === EventList.OBFUSCATION_INITIALIZATION) {
                const totalTimeUsage = this.getTotalTime();
                eventData += `Obfuscation time cost: ${totalTimeUsage} s\n`;
            }
            let depth = (_a = exports.eventList.get(eventName)) !== null && _a !== void 0 ? _a : DEFAULT_DEPTH;
            let eventInfo = this.eventStack.get(eventName);
            const duration = eventInfo.duration;
            const startMemory = eventInfo.startMemory / BYTE_TO_MB;
            const endMemory = eventInfo.endMemory / BYTE_TO_MB;
            const memoryUsage = eventInfo.memoryUsage / BYTE_TO_MB;
            if (eventInfo.filePath) {
                eventData += eventInfo.filePath + `\n`;
            }
            eventData += this.formatEvent(eventName, duration, startMemory, endMemory, memoryUsage, depth);
        }
        return eventData;
    }
    formatEvent(eventName, duration, startMemory, endMemory, memoryUsage, depth) {
        const indent = INDENT.repeat(depth);
        const formattedDuration = duration.toFixed(SIG_FIGS) + ' s';
        const formatttedStartMemory = startMemory.toFixed(SIG_FIGS) + 'MB';
        const formatttedEndMemory = endMemory.toFixed(SIG_FIGS) + 'MB';
        const formatttedMemoryUsage = memoryUsage.toFixed(SIG_FIGS) + 'MB';
        return `${indent}${eventName}: timeCost:${formattedDuration} startMemory:${formatttedStartMemory} ` +
            `endMemory:${formatttedEndMemory} memoryUsage:${formatttedMemoryUsage}\n`;
    }
    getTotalTime() {
        var _a, _b, _c, _d, _e, _f;
        let totalTime = ((_b = (_a = this.eventStack.get(EventList.OBFUSCATION_INITIALIZATION)) === null || _a === void 0 ? void 0 : _a.duration) !== null && _b !== void 0 ? _b : 0) +
            ((_d = (_c = this.eventStack.get(EventList.SCAN_SOURCEFILES)) === null || _c === void 0 ? void 0 : _c.duration) !== null && _d !== void 0 ? _d : 0) +
            ((_f = (_e = this.eventStack.get(EventList.ALL_FILES_OBFUSCATION)) === null || _e === void 0 ? void 0 : _e.duration) !== null && _f !== void 0 ? _f : 0);
        return totalTime.toFixed(SIG_FIGS);
    }
    // Only used for ut
    getEventStack() {
        return this.eventStack;
    }
    getFilesTimeSum() {
        return this.filesTimeSum;
    }
    getMaxTimeUsage() {
        return this.maxTimeUsage;
    }
    getMaxTimeFile() {
        return this.maxTimeFile;
    }
    getMaxMemoryUsage() {
        return this.maxMemoryUsage;
    }
    getMaxMemoryFile() {
        return this.maxMemoryFile;
    }
}
exports.TimeTracker = TimeTracker;
class TimeSumPrinter extends BasePrinter {
    constructor() {
        super(...arguments);
        this.eventSum = new Map();
    }
    addEventDuration(eventName, duration) {
        var _a;
        const currentValue = (_a = this.eventSum.get(eventName)) !== null && _a !== void 0 ? _a : 0;
        this.eventSum.set(eventName, currentValue + duration);
    }
    summarizeEventDuration() {
        if (this.enablePrinter) {
            const eventData = this.getCurrentEventData();
            this.print(eventData);
        }
    }
    getCurrentEventData() {
        var _a;
        let eventData = '';
        for (const eventName of this.eventSum.keys()) {
            let depth = (_a = exports.eventList.get(eventName)) !== null && _a !== void 0 ? _a : 0;
            const duration = this.eventSum.get(eventName);
            eventData += this.formatEvent(eventName, duration, depth);
        }
        return eventData;
    }
    formatEvent(eventName, duration, depth) {
        const indent = INDENT.repeat(depth);
        const formattedDuration = duration.toFixed(SIG_FIGS) + ' s';
        return `${indent}${eventName}: ${formattedDuration}\n`;
    }
    getEventSum() {
        return this.eventSum;
    }
}
exports.TimeSumPrinter = TimeSumPrinter;
/**
 * Initialize performance printer
 */
function initPerformancePrinter(mCustomProfiles) {
    const printerConfig = mCustomProfiles.mPerformancePrinter;
    // If no performance printer configuration is provided, disable the printer and return.
    if (!printerConfig) {
        blockPrinter();
        return;
    }
    // Disable performance printer if no specific printer types (files, single file, or summary) are enabled.
    const isPrinterDisabled = !(printerConfig.mFilesPrinter ||
        printerConfig.mSingleFilePrinter ||
        printerConfig.mSumPrinter);
    if (isPrinterDisabled) {
        blockPrinter();
        return;
    }
    const outputPath = printerConfig.mOutputPath;
    // Helper function to configure or disable a printer.
    const configurePrinter = (printer, isEnabled) => {
        if (!isEnabled) {
            printer === null || printer === void 0 ? void 0 : printer.disablePrinter();
            return;
        }
        printer === null || printer === void 0 ? void 0 : printer.setOutputPath(outputPath);
    };
    // Setup the individual printers based on configuration.
    configurePrinter(ArkObfuscator_1.performancePrinter.filesPrinter, printerConfig.mFilesPrinter);
    configurePrinter(ArkObfuscator_1.performancePrinter.singleFilePrinter, printerConfig.mSingleFilePrinter);
    configurePrinter(ArkObfuscator_1.performancePrinter.timeSumPrinter, printerConfig.mSumPrinter);
}
exports.initPerformancePrinter = initPerformancePrinter;
/**
 * Disable performance printer
 */
function blockPrinter() {
    ArkObfuscator_1.performancePrinter.filesPrinter = undefined;
    ArkObfuscator_1.performancePrinter.singleFilePrinter = undefined;
    ArkObfuscator_1.performancePrinter.timeSumPrinter = undefined;
}
exports.blockPrinter = blockPrinter;
/**
 * Start recording singleFilePrinter event
 */
function startSingleFileEvent(eventName, timeSumPrinter, currentFile) {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.singleFilePrinter) === null || _a === void 0 ? void 0 : _a.startEvent(eventName, timeSumPrinter, currentFile);
}
exports.startSingleFileEvent = startSingleFileEvent;
/**
 * End recording singleFilePrinter event
 */
function endSingleFileEvent(eventName, timeSumPrinter, isFilesPrinter, triggerSingleFilePrinter) {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.singleFilePrinter) === null || _a === void 0 ? void 0 : _a.endEvent(eventName, timeSumPrinter, isFilesPrinter, triggerSingleFilePrinter);
}
exports.endSingleFileEvent = endSingleFileEvent;
/**
 * Start recording filesPrinter event
 */
function startFilesEvent(eventName, timeSumPrinter, currentFile) {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.filesPrinter) === null || _a === void 0 ? void 0 : _a.startEvent(eventName, timeSumPrinter, currentFile);
}
exports.startFilesEvent = startFilesEvent;
/**
 * End recording filesPrinter event
 */
function endFilesEvent(eventName, timeSumPrinter, isFilesPrinter, triggerSingleFilePrinter) {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.filesPrinter) === null || _a === void 0 ? void 0 : _a.endEvent(eventName, timeSumPrinter, isFilesPrinter, triggerSingleFilePrinter);
}
exports.endFilesEvent = endFilesEvent;
/**
 * Print input info for timeSumPrinter
 */
function printTimeSumInfo(info) {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.timeSumPrinter) === null || _a === void 0 ? void 0 : _a.print(info);
}
exports.printTimeSumInfo = printTimeSumInfo;
/**
 * Print data of timeSumPrinter
 */
function printTimeSumData() {
    var _a;
    (_a = ArkObfuscator_1.performancePrinter.timeSumPrinter) === null || _a === void 0 ? void 0 : _a.summarizeEventDuration();
}
exports.printTimeSumData = printTimeSumData;
//# sourceMappingURL=PrinterUtils.js.map