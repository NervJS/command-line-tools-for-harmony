"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const typescript_1 = require("typescript");
const TransformPlugin_1 = require("../TransformPlugin");
const NodeUtils_1 = require("../../utils/NodeUtils");
const ArkObfuscator_1 = require("../../ArkObfuscator");
const PrinterUtils_1 = require("../../utils/PrinterUtils");
var secharmony;
(function (secharmony) {
    secharmony.transformerPlugin = {
        'name': 'VirtualConstructorTransformerFactory',
        'order': TransformPlugin_1.TransformerOrder.VIRTUAL_CONSTRUCTOR_TRANSFORMER,
        'createTransformerFactory': (option) => virtualConstructorTransformerFactory,
    };
})(secharmony || (secharmony = {}));
function virtualConstructorTransformerFactory(context) {
    return (node) => virtualConstructorTransformer(node, context);
}
function virtualConstructorTransformer(node, context) {
    if (!NodeUtils_1.NodeUtils.isDETSFile(node)) {
        return node;
    }
    (0, PrinterUtils_1.startSingleFileEvent)(PrinterUtils_1.EventList.VIRTUAL_CONSTRUCTOR_OBFUSCATION, ArkObfuscator_1.performancePrinter.timeSumPrinter);
    let astWithoutVirtualConstructor = removeVirtualConstructor(node, context);
    let parentNodes = (0, typescript_1.setParentRecursive)(astWithoutVirtualConstructor, true);
    (0, PrinterUtils_1.endSingleFileEvent)(PrinterUtils_1.EventList.VIRTUAL_CONSTRUCTOR_OBFUSCATION, ArkObfuscator_1.performancePrinter.timeSumPrinter);
    return parentNodes;
}
function removeVirtualConstructor(node, context) {
    if ((0, typescript_1.isStructDeclaration)(node)) {
        const tempStructMembers = node.members.filter((member) => !isVirtualConstructor(member));
        const structMembersWithoutVirtualConstructor = typescript_1.factory.createNodeArray(tempStructMembers);
        return typescript_1.factory.updateStructDeclaration(node, node.modifiers, node.name, node.typeParameters, node.heritageClauses, structMembersWithoutVirtualConstructor);
    }
    return (0, typescript_1.visitEachChild)(node, (childNode) => removeVirtualConstructor(childNode, context), context);
}
function isVirtualConstructor(node) {
    const originalNode = (0, typescript_1.getOriginalNode)(node);
    //@ts-ignore
    return (0, typescript_1.isConstructorDeclaration)(originalNode) && originalNode.virtual;
}
module.exports = secharmony;
//# sourceMappingURL=VirtualConstructorTransformer.js.map