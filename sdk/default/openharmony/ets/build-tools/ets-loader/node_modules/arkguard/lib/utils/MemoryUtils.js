"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryUtils = void 0;
class MemoryUtils {
    /**
     * Try garbage collection if obfuscaction starts or the memory usage exceeds MEMORY_BASELINE.
     */
    static tryGC() {
        if (!MemoryUtils.allowGC) {
            return;
        }
        const currentMemory = process.memoryUsage().heapUsed;
        if (MemoryUtils.baseMemorySize === undefined || (currentMemory - MemoryUtils.baseMemorySize > MemoryUtils.memoryGCThreshold)) {
            global.gc();
            MemoryUtils.updateBaseMemory();
            return;
        }
        if (MemoryUtils.baseMemorySize > currentMemory) {
            MemoryUtils.updateBaseMemory(currentMemory);
            return;
        }
    }
    // For ut only
    static setGC(allowGC) {
        MemoryUtils.allowGC = allowGC;
    }
    // For ut only
    static getBaseMemorySize() {
        return MemoryUtils.baseMemorySize;
    }
    // For ut only
    static setBaseMemorySize(baseMemorySize) {
        MemoryUtils.baseMemorySize = baseMemorySize;
    }
    // For ut only
    static setMinGCThreshold(threshold) {
        MemoryUtils.MIN_GC_THRESHOLD = threshold;
    }
    // For ut only
    static getMinGCThreshold() {
        return MemoryUtils.MIN_GC_THRESHOLD;
    }
    // For ut only
    static getGCThreshold() {
        return MemoryUtils.memoryGCThreshold;
    }
    static updateBaseMemory(currentMemory) {
        currentMemory = currentMemory !== null && currentMemory !== void 0 ? currentMemory : process.memoryUsage().heapUsed;
        const targetGCThreshold = currentMemory * MemoryUtils.GC_THRESHOLD_RATIO;
        MemoryUtils.memoryGCThreshold = Math.max(targetGCThreshold, MemoryUtils.MIN_GC_THRESHOLD);
        MemoryUtils.baseMemorySize = currentMemory;
    }
}
exports.MemoryUtils = MemoryUtils;
MemoryUtils.baseMemorySize = undefined;
MemoryUtils.allowGC = typeof global.gc === 'function';
MemoryUtils.MIN_GC_THRESHOLD = 64 * 1024 * 1024; // 64MB
MemoryUtils.memoryGCThreshold = MemoryUtils.MIN_GC_THRESHOLD;
MemoryUtils.GC_THRESHOLD_RATIO = 0.3;
//# sourceMappingURL=MemoryUtils.js.map