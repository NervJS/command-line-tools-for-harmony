import { INameObfuscationOption } from '../configs/INameObfuscationOption';
declare enum OptionType {
    NONE = 0,
    KEEP = 1,
    KEEP_DTS = 2,
    KEEP_GLOBAL_NAME = 3,
    KEEP_PROPERTY_NAME = 4,
    KEEP_FILE_NAME = 5,
    KEEP_COMMENTS = 6,
    DISABLE_OBFUSCATION = 7,
    ENABLE_PROPERTY_OBFUSCATION = 8,
    ENABLE_STRING_PROPERTY_OBFUSCATION = 9,
    ENABLE_TOPLEVEL_OBFUSCATION = 10,
    ENABLE_FILENAME_OBFUSCATION = 11,
    ENABLE_EXPORT_OBFUSCATION = 12,
    COMPACT = 13,
    REMOVE_LOG = 14,
    REMOVE_COMMENTS = 15,
    PRINT_NAMECACHE = 16,
    PRINT_KEPT_NAMES = 17,
    APPLY_NAMECACHE = 18
}
export { OptionType as OptionTypeForTest };
declare class ObOptions {
    disableObfuscation: boolean;
    enablePropertyObfuscation: boolean;
    enableStringPropertyObfuscation: boolean;
    enableToplevelObfuscation: boolean;
    enableFileNameObfuscation: boolean;
    enableExportObfuscation: boolean;
    printKeptNames: boolean;
    removeComments: boolean;
    compact: boolean;
    removeLog: boolean;
    printNameCache: string;
    printKeptNamesPath: string;
    applyNameCache: string;
    merge(other: ObOptions): void;
}
export declare const ObOptionsForTest: typeof ObOptions;
export declare class MergedConfig {
    options: ObOptions;
    reservedPropertyNames: string[];
    reservedGlobalNames: string[];
    reservedNames: string[];
    reservedFileNames: string[];
    keepComments: string[];
    keepSourceOfPaths: string[];
    universalReservedPropertyNames: RegExp[];
    universalReservedGlobalNames: RegExp[];
    keepUniversalPaths: RegExp[];
    excludeUniversalPaths: RegExp[];
    excludePathSet: Set<string>;
    merge(other: MergedConfig): void;
    sortAndDeduplicate(): void;
    serializeMergedConfig(): string;
}
export declare class ObConfigResolver {
    sourceObConfig: any;
    logger: any;
    isHarCompiled: boolean | undefined;
    isTerser: boolean;
    constructor(projectConfig: any, logger: any, isTerser?: boolean);
    resolveObfuscationConfigs(): MergedConfig;
    private getSelfConfigs;
    getSelfConfigsForTest(selfConfigs: MergedConfig): void;
    private getConfigByPath;
    getConfigByPathForTest(path: string, configs: MergedConfig): void;
    private handleReservedArray;
    handleReservedArrayForTest(mergedConfigs: MergedConfig): void;
    static readonly KEEP = "-keep";
    static readonly KEEP_DTS = "-keep-dts";
    static readonly KEEP_GLOBAL_NAME = "-keep-global-name";
    static readonly KEEP_PROPERTY_NAME = "-keep-property-name";
    static readonly KEEP_FILE_NAME = "-keep-file-name";
    static readonly KEEP_COMMENTS = "-keep-comments";
    static readonly DISABLE_OBFUSCATION = "-disable-obfuscation";
    static readonly ENABLE_PROPERTY_OBFUSCATION = "-enable-property-obfuscation";
    static readonly ENABLE_STRING_PROPERTY_OBFUSCATION = "-enable-string-property-obfuscation";
    static readonly ENABLE_TOPLEVEL_OBFUSCATION = "-enable-toplevel-obfuscation";
    static readonly ENABLE_FILENAME_OBFUSCATION = "-enable-filename-obfuscation";
    static readonly ENABLE_EXPORT_OBFUSCATION = "-enable-export-obfuscation";
    static readonly REMOVE_COMMENTS = "-remove-comments";
    static readonly COMPACT = "-compact";
    static readonly REMOVE_LOG = "-remove-log";
    static readonly PRINT_NAMECACHE = "-print-namecache";
    static readonly PRINT_KEPT_NAMES = "-print-kept-names";
    static readonly APPLY_NAMECACHE = "-apply-namecache";
    static exportedSwitchMap: Map<string, string>;
    private getTokenType;
    getTokenTypeForTest(token: string): OptionType;
    private handleConfigContent;
    handleConfigContentForTest(data: string, configs: MergedConfig, configPath: string): void;
    private resolvePath;
    resolvePathForTest(configPath: string, token: string): string;
    private resolveDts;
    resolveKeepConfig(keepConfigs: string[], configs: MergedConfig, configPath: string): void;
    private removeComments;
    /**
     * systemConfigs includes the API directorys.
     * component directory and pre_define.js file path needs to be concatenated
     * @param systemConfigs
     */
    private getSystemApiCache;
    getSystemApiCacheForTest(systemConfigs: MergedConfig, systemApiCachePath: string): void;
    private getSdkApiCache;
    private getUIApiCache;
    private getDependencyConfigs;
    getDependencyConfigsForTest(sourceObConfig: any, dependencyConfigs: MergedConfig): void;
    private getSystemApiConfigsByCache;
    getSystemApiConfigsByCacheForTest(systemApiCachePath: string): void;
    private getSelfConsumerConfig;
    getSelfConsumerConfigForTest(selfConsumerConfig: MergedConfig): void;
    private getMergedConfigs;
    getMergedConfigsForTest(selfConfigs: MergedConfig, dependencyConfigs: MergedConfig): MergedConfig;
    private genConsumerConfigFiles;
    genConsumerConfigFilesForTest(sourceObConfig: any, selfConsumerConfig: MergedConfig, dependencyConfigs: MergedConfig): void;
    writeConsumerConfigFile(selfConsumerConfig: MergedConfig, outpath: string): void;
    private determineNameCachePath;
}
/**
 * Collect reserved file name configured in oh-package.json5 and module.json5.
 * @param ohPackagePath The 'main' and 'types' fileds in oh-package.json5 need to be reserved.
 * @param projectConfig Several paths or file contents in projectconfig need to be reserved.
 *   1: module.json's 'srcEntry' field
 *   2: projectPath: /library/src/main/ets
 *   3: cachePath: /library/build/default/cache/default/default@HarCompileArkTs/esmodules/release
 *      target reserved path: /library/build/default/cache/default/default@HarCompileArkTs/esmodules/release/src/main/ets
 *   4: aceModuleBuild/etsFortgz directory: /library/build/default/intermediates/loader_out/etsFortgz
 *      If compile the hsp module, the declaration file will be written to the 'aceModuleBuild/etsFortgz' directory.
 * @param modulePathMap packageName of local har package should be reserved as it is a fixed part of ohmUrl.
 *   example: modulePathMap: { packageName: path }
 * @returns reservedFileNames
 */
export declare function collectResevedFileNameInIDEConfig(ohPackagePath: string, projectConfig: any, modulePathMap: Object | undefined, entryArray: Array<string> | undefined): string[];
export declare function readNameCache(nameCachePath: string, logger: any): void;
/**
 * collect the reserved or excluded paths containing wildcards
 */
export declare function handleUniversalPathInObf(mergedObConfig: MergedConfig, allSourceFilePaths: Set<string>): void;
export declare function getArkguardNameCache(enablePropertyObfuscation: boolean, enableFileNameObfuscation: boolean, enableExportObfuscation: boolean, sdkVersion: string, entryPackageInfo: string): string;
export declare function fillNameCache(table: Map<string, string>, nameCache: Map<string, string>): void;
export declare function writeObfuscationNameCache(projectConfig: any, entryPackageInfo: string, obfuscationCacheDir?: string, printNameCache?: string): void;
export declare function writeUnobfuscationContent(projectConfig: any): void;
export declare function printWhitelist(obfuscationOptions: ObOptions, nameOptions: INameObfuscationOption, defaultPath: string): void;
export declare function printUnobfuscationReasons(configPath: string, defaultPath: string): void;
export declare function generateConsumerObConfigFile(obfuscationOptions: any, logger: any): void;
export declare function mangleFilePath(originalPath: string): string;
export declare function enableObfuscatedFilePathConfig(isPackageModules: boolean, projectConfig: any): boolean;
export declare function handleObfuscatedFilePath(filePath: string, isPackageModules: boolean, projectConfig: Object): string;
export declare function enableObfuscateFileName(isPackageModules: boolean, projectConfig: Object): boolean;
/**
 * Get the relative path relative to the project based on the file's associated project
 */
export declare function getRelativeSourcePath(filePath: string, projectRootPath: string | undefined, belongProjectPath: string | undefined): string;
