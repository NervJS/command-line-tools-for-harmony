import { ArkObfuscator } from './ArkObfuscator';
import type { IOptions } from './configs/IOptions';
export declare class ArkObfuscatorForTest extends ArkObfuscator {
    private readonly mSourceFiles;
    private readonly mConfigPath;
    private mTestType;
    constructor(sourceFiles?: string[], configPath?: string);
    get configPath(): string;
    setTestType(testType: string | undefined): void;
    /**
     * init ArkObfuscator according to user config
     * should be called after constructor
     */
    init(config: IOptions | undefined): boolean;
    /**
     * Obfuscate all the source files.
     */
    obfuscateFiles(): Promise<void>;
    private writeUnobfuscationContentForTest;
    private printWhitelist;
    private handleUniversalReservedList;
    /**
     * obfuscate directory
     * @private
     */
    private obfuscateDir;
    /**
     * Obfuscate single source file with path provided
     *
     * @param sourceFilePath single source file path
     * @param outputDir
     */
    obfuscateFile(sourceFilePath: string, outputDir: string): Promise<void>;
    private getOutputPath;
    private writeContent;
    private loadunobfuscationNameMap;
    private shouldIgnoreFile;
    private getPathAfterDirectory;
    private produceNameCache;
    private readNameCache;
    private producePropertyCache;
    private readPropertyCache;
}
