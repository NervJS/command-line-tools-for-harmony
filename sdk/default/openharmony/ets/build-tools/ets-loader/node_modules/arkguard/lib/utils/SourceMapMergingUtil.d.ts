import type { RawSourceMap } from 'typescript';
import { SourceMapSegment } from '@jridgewell/sourcemap-codec';
/**
 * The sourcemap format with decoded mappings with number type.
 */
export interface ExistingDecodedSourceMap {
    file?: string;
    mappings: SourceMapSegment[][];
    names?: string[];
    sourceRoot?: string;
    sources: string[];
    sourcesContent?: string[];
    version: number;
}
interface BaseSource {
    traceSegment(line: number, column: number, name: string): SourceMapSegmentObj | null;
}
/**
 * The source file info.
 */
export declare class Source implements BaseSource {
    readonly content: string | null;
    readonly filename: string;
    isOriginal: boolean;
    constructor(filename: string, content: string | null);
    traceSegment(line: number, column: number, name: string): SourceMapSegmentObj;
}
/**
 * The interpreted sourcemap line and column info.
 */
export interface SourceMapSegmentObj {
    column: number;
    line: number;
    name: string;
    source: Source;
}
type MappingsNameType = {
    mappings: readonly SourceMapSegment[][];
    names?: readonly string[];
};
type TracedMappingsType = {
    mappings: SourceMapSegment[][];
    names: string[];
    sources: string[];
};
/**
 * Provide api tools related to sourcemap.
 */
export declare class SourceMapLink implements BaseSource {
    readonly mappings: readonly SourceMapSegment[][];
    readonly names?: readonly string[];
    readonly sources: BaseSource[];
    constructor(map: MappingsNameType, sources: BaseSource[]);
    traceMappings(): TracedMappingsType;
    analyzeTracedSource(traced: SourceMapSegmentObj, tracedSources: string[], sourceIndexMap: Map<string, number>, sourcesContent: (string | null)[]): void;
    recordTracedName(traced: SourceMapSegmentObj, tracednames: string[], nameIndexMap: Map<string, number>, targetSegment: SourceMapSegment): void;
    traceSegment(line: number, column: number, name: string): SourceMapSegmentObj | null;
}
/**
 * Decode the sourcemap from string format to number format.
 * @param map The sourcemap with raw string format, eg. mappings: IAGS,OAAO,GAAE,MAAM,CAAA;
 * @returns The sourcemap with decoded number format, eg. mappings: [4,0,3,9], [7,0,0,7], [3,0,0,2], [6,0,0,6], [1,0,0,0]
 */
export declare function decodeSourcemap(map: RawSourceMap): ExistingDecodedSourceMap | null;
/**
 * Merge the sourcemaps of the two processes into the sourcemap of the complete process.
 * @param previousMap The sourcemap before obfuscation process, such as ets-loader transform
 * @param currentMap The sourcemap of obfuscation process
 * @returns The merged sourcemap
 */
export declare function mergeSourceMap(previousMap: RawSourceMap, currentMap: RawSourceMap): RawSourceMap;
export {};
