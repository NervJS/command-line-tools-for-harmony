import type { IOptions } from '../configs/IOptions';
import type { PathAndExtension } from '../common/type';
export declare const BUNDLE = "@bundle:";
export declare const NORMALIZE = "@normalized:";
export declare class FileUtils {
    /**
     * Read file and return content
     *
     * @param filePath file path
     */
    static readFile(filePath: string): string | undefined;
    /**
     * Read file and convert to json object.
     *
     * @param filePath file path
     */
    static readFileAsJson(filePath: string): IOptions | undefined;
    /**
     * Get File Name
     *
     * @param filePath file path
     */
    static getFileName(filePath: string): string | undefined;
    /**
     * Get suffix of a file.
     *
     * @param filePath file path
     */
    static getFileExtension(filePath: string): string | undefined;
    static writeFile(filePath: string, content: string): void;
    /**
     * get prefix of directory
     * @param dirPath
     */
    static getPrefix(dirPath: string): string | undefined;
    static getPathWithoutPrefix(filePath: string, prefix: string): string | undefined;
    static splitFilePath(filePath: string): string[];
    /**
     * split the file path and collect the results into the reserved array
     */
    static collectPathReservedString(filePath: string, reservedArray: string[]): void;
    static relativePathBegins: string[];
    static isRelativePath(filePath: string): boolean;
    static getFileSuffix(filePath: string): PathAndExtension;
    static isReadableFile(filePath: string): boolean;
    static toUnixPath(data: string): string;
    static getAbsPathBaseConfigPath(configPath: string, relativePath: string): string;
    static deleteFile(filePath: string): void;
}
