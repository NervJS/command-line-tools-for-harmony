"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSetToArray = exports.mergeSet = exports.sortAndDeduplicateStringArr = exports.isFileExist = exports.isDebug = void 0;
const fs_1 = __importDefault(require("fs"));
const CommonObject_1 = require("./CommonObject");
function isDebug(projectConfig) {
    return projectConfig.buildMode.toLowerCase() === CommonObject_1.DEBUG;
}
exports.isDebug = isDebug;
function isFileExist(filePath) {
    let exist = true;
    try {
        fs_1.default.accessSync(filePath, fs_1.default.constants.F_OK);
    }
    catch (err) {
        exist = !err;
    }
    return exist;
}
exports.isFileExist = isFileExist;
function sortAndDeduplicateStringArr(arr) {
    if (arr.length === 0) {
        return arr;
    }
    arr.sort((a, b) => {
        return a.localeCompare(b);
    });
    let tmpArr = [arr[0]];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] !== arr[i - 1]) {
            tmpArr.push(arr[i]);
        }
    }
    return tmpArr;
}
exports.sortAndDeduplicateStringArr = sortAndDeduplicateStringArr;
function mergeSet(set1, set2) {
    if (set1.size > 0 && set2.size > 0) {
        return new Set([...set1, ...set2]);
    }
    if (set1.size > 0) {
        return set1;
    }
    return set2;
}
exports.mergeSet = mergeSet;
function convertSetToArray(reservedSet) {
    if (!reservedSet) {
        return [];
    }
    return Array.from(reservedSet);
}
exports.convertSetToArray = convertSetToArray;
//# sourceMappingURL=utils.js.map