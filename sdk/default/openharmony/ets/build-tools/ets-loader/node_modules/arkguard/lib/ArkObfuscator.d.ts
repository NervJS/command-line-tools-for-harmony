import type { Printer, RawSourceMap, SourceFile } from 'typescript';
import { PropCollections } from './utils/CommonCollections';
import type { IOptions } from './configs/IOptions';
import { deleteLineInfoForNameString, getMapFromJson } from './utils/NameCacheUtil';
import { readProjectPropertiesByCollectedPaths } from './common/ApiReader';
import type { ReseverdSetForArkguard } from './common/ApiReader';
import { ApiExtractor } from './common/ApiExtractor';
import { TimeSumPrinter, TimeTracker } from './utils/PrinterUtils';
export { EventList, TimeSumPrinter, blockPrinter, endFilesEvent, endSingleFileEvent, printTimeSumData, printTimeSumInfo, startFilesEvent, startSingleFileEvent, } from './utils/PrinterUtils';
import { type ProjectInfo, type FilePathObj } from './common/type';
export { FileUtils } from './utils/FileUtils';
export { MemoryUtils } from './utils/MemoryUtils';
export { UnobfuscationCollections } from './utils/CommonCollections';
export { separateUniversalReservedItem, containWildcards, wildcardTransformer } from './utils/TransformUtil';
export type { ReservedNameInfo } from './utils/TransformUtil';
export type { ReseverdSetForArkguard } from './common/ApiReader';
export { initObfuscationConfig } from './initialization/Initializer';
export { nameCacheMap, unobfuscationNamesObj } from './initialization/CommonObject';
export { collectResevedFileNameInIDEConfig, // For running unit test.
enableObfuscatedFilePathConfig, enableObfuscateFileName, generateConsumerObConfigFile, getRelativeSourcePath, handleObfuscatedFilePath, handleUniversalPathInObf, mangleFilePath, MergedConfig, ObConfigResolver, readNameCache, writeObfuscationNameCache, writeUnobfuscationContent } from './initialization/ConfigResolver';
export { collectReservedNameForObf } from './utils/NodeUtils';
export declare const renameIdentifierModule: any;
export declare const renameFileNameModule: any;
export { getMapFromJson, readProjectPropertiesByCollectedPaths, deleteLineInfoForNameString, ApiExtractor, PropCollections };
export declare let orignalFilePathForSearching: string | undefined;
export declare let cleanFileMangledNames: boolean;
export interface PerformancePrinter {
    filesPrinter?: TimeTracker;
    singleFilePrinter?: TimeTracker;
    timeSumPrinter?: TimeSumPrinter;
}
export declare let performancePrinter: PerformancePrinter;
export declare function clearGlobalCaches(): void;
export type ObfuscationResultType = {
    content: string;
    sourceMap?: RawSourceMap;
    nameCache?: {
        [k: string]: string | {};
    };
    filePath?: string;
    unobfuscationNameMap?: Map<string, Set<string>>;
};
export declare class ArkObfuscator {
    protected mWriteOriginalFile: boolean;
    private mTextWriter;
    private readonly mCompilerOptions;
    protected mCustomProfiles: IOptions;
    private mTransformers;
    static mProjectInfo: ProjectInfo | undefined;
    static mIsKeptCurrentFile: boolean;
    constructor();
    setWriteOriginalFile(flag: boolean): void;
    addReservedSetForPropertyObf(properties: ReseverdSetForArkguard): void;
    addReservedSetForDefaultObf(properties: ReseverdSetForArkguard): void;
    setKeepSourceOfPaths(mKeepSourceOfPaths: Set<string>): void;
    handleTsHarComments(sourceFile: SourceFile, originalPath: string | undefined): void;
    get customProfiles(): IOptions;
    static get isKeptCurrentFile(): boolean;
    static set isKeptCurrentFile(isKeptFile: boolean);
    static get projectInfo(): ProjectInfo;
    static set projectInfo(projectInfo: ProjectInfo);
    private isCurrentFileInKeepPaths;
    /**
     * init ArkObfuscator according to user config
     * should be called after constructor
     */
    init(config: IOptions | undefined): boolean;
    /**
     * A Printer to output obfuscated codes.
     */
    createObfsPrinter(isDeclarationFile: boolean): Printer;
    protected isObfsIgnoreFile(fileName: string): boolean;
    private convertLineBasedOnSourceMap;
    /**
     * Obfuscate ast of a file.
     * @param content ast or source code of a source file
     * @param sourceFilePathObj
     * @param previousStageSourceMap
     * @param historyNameCache
     * @param originalFilePath When filename obfuscation is enabled, it is used as the source code path.
     */
    obfuscate(content: SourceFile | string, sourceFilePathObj: FilePathObj, previousStageSourceMap?: RawSourceMap, historyNameCache?: Map<string, string>, originalFilePath?: string, projectInfo?: ProjectInfo): Promise<ObfuscationResultType>;
    private createAst;
    private obfuscateAst;
    private handleDeclarationFile;
    /**
     * write obfuscated code, sourcemap and namecache
     */
    private writeObfuscationResult;
    private handleUnobfuscationNames;
    private handleSourceMapAndNameCache;
    private clearCaches;
}
