"use strict";
/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalVariableCollections = exports.UnobfuscationCollections = exports.PropCollections = void 0;
// This records the collections related to property obfuscation.
var PropCollections;
(function (PropCollections) {
    // whether enable property obfuscation
    PropCollections.enablePropertyObfuscation = false;
    // global mangled properties table used by all files in a project
    PropCollections.globalMangledTable = new Map();
    // used for property cache
    PropCollections.historyMangledTable = undefined;
    // the white list of property
    PropCollections.reservedProperties = new Set();
    PropCollections.universalReservedProperties = [];
    // saved generated property name
    PropCollections.newlyOccupiedMangledProps = new Set();
    PropCollections.mangledPropsInNameCache = new Set();
    // When the module is compiled, call this function to clear the collections associated with property obfuscation.
    function clearPropsCollections() {
        PropCollections.globalMangledTable.clear();
        PropCollections.historyMangledTable === null || PropCollections.historyMangledTable === void 0 ? void 0 : PropCollections.historyMangledTable.clear();
        PropCollections.reservedProperties.clear();
        PropCollections.universalReservedProperties = [];
        PropCollections.newlyOccupiedMangledProps.clear();
        PropCollections.mangledPropsInNameCache.clear();
    }
    PropCollections.clearPropsCollections = clearPropsCollections;
})(PropCollections = exports.PropCollections || (exports.PropCollections = {}));
// This records the collections related to whitelists
var UnobfuscationCollections;
(function (UnobfuscationCollections) {
    // printKeptName: by user configuration, it decides whether to print unobfuscation names and whitelists.
    UnobfuscationCollections.printKeptName = false;
    // whitelist
    UnobfuscationCollections.reservedSdkApiForProp = new Set();
    UnobfuscationCollections.reservedSdkApiForGlobal = new Set();
    UnobfuscationCollections.reservedSdkApiForLocal = new Set();
    UnobfuscationCollections.reservedStruct = new Set();
    UnobfuscationCollections.reservedLangForProperty = new Set();
    // declare global {}
    // In the above syntax, 'global' is named '__global' in tsc.
    UnobfuscationCollections.reservedLangForTopLevel = new Set(['__global', 'default']); // Will not add new elements anymore
    UnobfuscationCollections.reservedExportName = new Set();
    UnobfuscationCollections.reservedExportNameAndProp = new Set();
    UnobfuscationCollections.reservedStrProp = new Set();
    UnobfuscationCollections.reservedEnum = new Set();
    // The mapping between the unobfuscated names and their reasons.
    UnobfuscationCollections.unobfuscatedPropMap = new Map();
    UnobfuscationCollections.unobfuscatedNamesMap = new Map();
    // The mapping between wildcards and regular expressions
    UnobfuscationCollections.reservedWildcardMap = new Map();
    function clear() {
        UnobfuscationCollections.printKeptName = false;
        UnobfuscationCollections.reservedSdkApiForProp.clear();
        UnobfuscationCollections.reservedSdkApiForGlobal.clear();
        UnobfuscationCollections.reservedSdkApiForLocal.clear();
        UnobfuscationCollections.reservedStruct.clear();
        UnobfuscationCollections.reservedLangForProperty.clear();
        UnobfuscationCollections.reservedExportName.clear();
        UnobfuscationCollections.reservedExportNameAndProp.clear();
        UnobfuscationCollections.reservedStrProp.clear();
        UnobfuscationCollections.reservedEnum.clear();
        UnobfuscationCollections.unobfuscatedPropMap.clear();
        UnobfuscationCollections.unobfuscatedNamesMap.clear();
    }
    UnobfuscationCollections.clear = clear;
})(UnobfuscationCollections = exports.UnobfuscationCollections || (exports.UnobfuscationCollections = {}));
var LocalVariableCollections;
(function (LocalVariableCollections) {
    LocalVariableCollections.reservedStruct = new Set();
    LocalVariableCollections.reservedConfig = new Set(); // Obtain the name from the user-configured .d.ts file
    LocalVariableCollections.reservedLangForLocal = new Set(['this', '__global']); // Will not add new elements anymore
    function clear() {
        LocalVariableCollections.reservedStruct.clear();
        LocalVariableCollections.reservedConfig.clear();
    }
    LocalVariableCollections.clear = clear;
})(LocalVariableCollections = exports.LocalVariableCollections || (exports.LocalVariableCollections = {}));
//# sourceMappingURL=CommonCollections.js.map