import type { ClassDeclaration, ClassExpression, ElementAccessExpression, EnumDeclaration, GetAccessorDeclaration, IndexedAccessTypeNode, InterfaceDeclaration, MethodDeclaration, Modifier, Node, ObjectLiteralExpression, PropertyAssignment, PropertyName, SetAccessorDeclaration, StructDeclaration, TypeAliasDeclaration } from 'typescript';
export declare const stringPropsSet: Set<string>;
/**
 * The struct properties may be initialized in other files, but the properties in the struct definition are not obfuscated.
 * So the whitelist of struct properties is collected during the project scanning process.
 */
export declare const structPropsSet: Set<string>;
/**
 * Add enum elements into whitelist when compiling har module to avoid obfuscating enum elements
 * since enum elements in js file cannot be obfuscated properly.
 */
export declare const enumPropsSet: Set<string>;
/**
 * Collect the original name of export elements to ensure we can collect their properties
 */
export declare const exportOriginalNameSet: Set<string>;
/**
 * used to ignore user defined ui component class property name
 * @param classNode
 */
export declare function isViewPUBasedClass(classNode: ClassDeclaration | undefined): boolean;
export declare function collectPropertyNamesAndStrings(memberName: PropertyName, propertySet: Set<string>): void;
export declare function getElementAccessExpressionProperties(elementAccessExpressionNode: ElementAccessExpression): void;
/**
 * Process the IndexedAccessTypeNode and add the stringLiteral in its indexType to the stringPropsSet
 * @param indexedAccessTypeNode
 */
export declare function getIndexedAccessTypeProperties(indexedAccessTypeNode: IndexedAccessTypeNode): void;
export declare function getTypeAliasProperties(typeAliasNode: TypeAliasDeclaration, propertySet: Set<string>): void;
/**
 * export interface interfaceName {
 *  a1: number;
 *  "a2": number;
 *  ["a3"]: number;
 * }
 */
export declare function getInterfaceProperties(interfaceNode: InterfaceDeclaration, propertySet: Set<string>): void;
export declare function isParameterPropertyModifier(modifier: Modifier): boolean;
export declare function getClassProperties(classNode: ClassDeclaration | ClassExpression | StructDeclaration, propertySet: Set<string>): void;
export declare function getEnumProperties(enumNode: EnumDeclaration, propertySet: Set<string>): void;
export declare function getObjectProperties(objNode: ObjectLiteralExpression, propertySet: Set<string>): void;
export declare function getStructProperties(structNode: StructDeclaration, propertySet: Set<string>): void;
/**
 * collect elements into export whitelist for module.exports = {A, B, C, D}
 * since these elements can be import by `const {A, B, C, D} = require("./filePath");`
 */
export declare function getObjectExportNames(objNode: ObjectLiteralExpression, exportNames: Set<string>): void;
/**
 * Collect property names in ObjectLiteralExpression
 */
export declare function addExportPropertyName(propertyElement: PropertyAssignment | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration, exportNames: Set<string>): void;
/**
 * Collect reserved names in enum
 * e.g.
 * enum H {
 *   A,
 *   B = A + 1
 * }
 * A is reserved
 */
export declare function visitEnumInitializer(childNode: Node): void;
/**
 * collect properties of ViewPU class as reserved names
 */
export declare function getViewPUClassProperties(classNode: ClassDeclaration | ClassExpression): void;
