import type { IOptions } from '../configs/IOptions';
export declare enum EventList {
    OBFUSCATION_INITIALIZATION = "Obfuscation initialization",
    SCAN_SYSTEMAPI = "Scan system api",
    SCAN_SOURCEFILES = "Scan source files",
    ALL_FILES_OBFUSCATION = "All files obfuscation",
    OBFUSCATE = "Obfuscate",
    CREATE_AST = "Create AST",
    OBFUSCATE_AST = "Obfuscate AST",
    VIRTUAL_CONSTRUCTOR_OBFUSCATION = "Virtual constructor obfuscation",
    SHORT_HAND_OBFUSCATION = "Shorthand obfuscation",
    REMOVE_CONSOLE = "Remove console",
    PROPERTY_OBFUSCATION = "Property obfuscation",
    IDENTIFIER_OBFUSCATION = "Identifier obfuscation",
    CREATE_CHECKER = "Create checker",
    CREATE_PROGRAM = "Create program",
    GET_CHECKER = "Get checker",
    SCOPE_ANALYZE = "Scope analyze",
    CREATE_OBFUSCATED_NAMES = "Create obfuscated names",
    OBFUSCATE_NODES = "Obfuscate nodes",
    FILENAME_OBFUSCATION = "Filename obfuscation",
    CREATE_PRINTER = "Create Printer",
    GET_SOURCEMAP_GENERATOR = "Get sourcemap generator",
    SOURCEMAP_MERGE = "Sourcemap merge",
    CREATE_NAMECACHE = "Create namecache",
    WRITE_FILE = "Write file"
}
export declare enum EventIndentation {
    FOURSPACE = 4,
    THREESPACE = 3,
    TWOSPACE = 2,
    ONESPACE = 1,
    NOSPACE = 0
}
export declare const eventList: Map<string, number>;
export interface TimeAndMemInfo {
    start: number;
    duration: number;
    startMemory: number;
    endMemory: number;
    memoryUsage: number;
    filePath?: string;
}
declare abstract class BasePrinter {
    protected outputPath: string | undefined;
    protected abstract getCurrentEventData(): string;
    protected enablePrinter: boolean;
    disablePrinter(): void;
    /**
     * Only for ut
     */
    isEnabled(): boolean;
    constructor(outputPath?: string);
    setOutputPath(outputPath: string | undefined): void;
    print(message: string): void;
    outputData(): void;
    getOutputPath(): string;
}
export declare class TimeTracker extends BasePrinter {
    private eventStack;
    private filesTimeSum;
    private maxTimeUsage;
    private maxTimeFile;
    private maxMemoryUsage;
    private maxMemoryFile;
    startEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, currentFile?: string): void;
    endEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, isFilesPrinter?: boolean, triggerSingleFilePrinter?: boolean): void;
    getCurrentEventData(): string;
    private formatEvent;
    private getTotalTime;
    getEventStack(): Map<string, TimeAndMemInfo>;
    getFilesTimeSum(): number;
    getMaxTimeUsage(): number;
    getMaxTimeFile(): string;
    getMaxMemoryUsage(): number;
    getMaxMemoryFile(): string;
}
export declare class TimeSumPrinter extends BasePrinter {
    private eventSum;
    addEventDuration(eventName: string, duration: number): void;
    summarizeEventDuration(): void;
    getCurrentEventData(): string;
    private formatEvent;
    getEventSum(): Map<string, number>;
}
/**
 * Initialize performance printer
 */
export declare function initPerformancePrinter(mCustomProfiles: IOptions): void;
/**
 * Disable performance printer
 */
export declare function blockPrinter(): void;
/**
 * Start recording singleFilePrinter event
 */
export declare function startSingleFileEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, currentFile?: string): void;
/**
 * End recording singleFilePrinter event
 */
export declare function endSingleFileEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, isFilesPrinter?: boolean, triggerSingleFilePrinter?: boolean): void;
/**
 * Start recording filesPrinter event
 */
export declare function startFilesEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, currentFile?: string): void;
/**
 * End recording filesPrinter event
 */
export declare function endFilesEvent(eventName: string, timeSumPrinter?: TimeSumPrinter, isFilesPrinter?: boolean, triggerSingleFilePrinter?: boolean): void;
/**
 * Print input info for timeSumPrinter
 */
export declare function printTimeSumInfo(info: string): void;
/**
 * Print data of timeSumPrinter
 */
export declare function printTimeSumData(): void;
export {};
