# This CMake module is responsible for interpreting the user defined LLVM_
# options that toggle downstream BiSheng features.

# This CMake module also enforces dependencies between such options. A feature
# option which depends on another must check that the latter is set to true
# before proceeding, otherwise it is should terminate CMake with a fatal error.

### COMMON (PORTABLE) OPTIONS ##################################################

# Use the BSPUB_COMMON macro to guard features that may be internally
# open-sourced within the company. It is typically used for functional
# bug-fixes, downstream modifications to upstream analysis passes which
# can be used by many other components, and other changes which provide
# lower differentiating value.
option(LLVM_BSPUB_COMMON "Enable public BiSheng features, i.e. Huawei internally visible features" OFF)
if(LLVM_BSPUB_COMMON)
  set(LLVM_BSPUB_COMMON 1)
  add_definitions( -DBSPUB_COMMON )
else()
  set(LLVM_BSPUB_COMMON 0)
endif()

# Use the BSPRIV_COMMON macro to guard features that may be visible within the
# Compiler Lab. Downstream analysis passes which can be used by multiple
# components are typically guarded with this macro.
option(LLVM_BSPRIV_COMMON "Enable private BiSheng features, i.e. compiler lab-wide visible features" OFF)
if(LLVM_BSPRIV_COMMON)
  set(LLVM_BSPRIV_COMMON 1)
  add_definitions( -DBSPRIV_COMMON )
else()
  set(LLVM_BSPRIV_COMMON 0)
endif()

# Keep the options below sorted in alphabetical order.

option(LLVM_BSPRIV_COMMON_ALIAS_ANALYSIS "Enable BiSheng AliasAnalysis features" OFF)
if(LLVM_BSPRIV_COMMON_ALIAS_ANALYSIS)
  set(LLVM_BSPRIV_COMMON_ALIAS_ANALYSIS 1)
  add_definitions( -DBSPRIV_COMMON_ALIAS_ANALYSIS )
else()
  set(LLVM_BSPRIV_COMMON_ALIAS_ANALYSIS 0)
endif()

option(LLVM_BSPRIV_COMMON_ARRAY_COMPUTATION_REDUCTION "Enable BiSheng Array Computation Reduction features" OFF)
if (LLVM_BSPRIV_COMMON_ARRAY_COMPUTATION_REDUCTION)
  set(LLVM_BSPRIV_COMMON_ARRAY_COMPUTATION_REDUCTION 1)
  add_definitions(-DBSPRIV_COMMON_ARRAY_COMPUTATION_REDUCTION)
else()
  set(LLVM_BSPRIV_COMMON_ARRAY_COMPUTATION_REDUCTION 0)
endif()

option(LLVM_BSPRIV_COMMON_ARRAY_RESTRUCTURING "Enable BiSheng ArrayRestructuring features" OFF)
if (LLVM_BSPRIV_COMMON_ARRAY_RESTRUCTURING)
  set(LLVM_BSPRIV_COMMON_ARRAY_RESTRUCTURING 1)
  add_definitions( -DBSPRIV_COMMON_ARRAY_RESTRUCTURING )
else()
  set(LLVM_BSPRIV_COMMON_ARRAY_RESTRUCTURING 0)
endif()

option(LLVM_BSPRIV_COMMON_AUTO_TUNING "Enable BiSheng Auto-Tuning features" OFF)
if (LLVM_BSPRIV_COMMON_AUTO_TUNING)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSRIV_COMMON_AUTO_TUNING=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_COMMON_AUTO_TUNING 1)
    add_definitions( -DBSPRIV_COMMON_AUTO_TUNING )
  endif()
else()
  set(LLVM_BSPRIV_COMMON_AUTO_TUNING 0)
endif()

option(LLVM_BSPRIV_COMMON_BLOCK_REORDER "Enable BiSheng BlockReorder features" OFF)
if(LLVM_BSPRIV_COMMON_BLOCK_REORDER)
  set(LLVM_BSPRIV_COMMON_BLOCK_REORDER 1)
  add_definitions( -DBSPRIV_COMMON_BLOCK_REORDER )
else()
  set(LLVM_BSPRIV_COMMON_BLOCK_REORDER 0)
endif()

option(LLVM_BSPRIV_COMMON_BOSCC "Enable BiSheng BOSCC (Branch On Superword Condition Codes) features" OFF)
if (LLVM_BSPRIV_COMMON_BOSCC)
  set(LLVM_BSPRIV_COMMON_BOSCC 1)
  add_definitions(-DBSPRIV_COMMON_BOSCC)
else()
  set(LLVM_BSPRIV_COMMON_BOSCC 0)
endif()

option(LLVM_BSPRIV_COMMON_BRANCH_PROBABILITY_INFO "Enable BiSheng BranchProbabilityInfo features" OFF)
if (LLVM_BSPRIV_COMMON_BRANCH_PROBABILITY_INFO)
  set(LLVM_BSPRIV_COMMON_BRANCH_PROBABILITY_INFO 1)
  add_definitions( -DBSPRIV_COMMON_BRANCH_PROBABILITY_INFO )
else()
  set(LLVM_BSPRIV_COMMON_BRANCH_PROBABILITY_INFO 0)
endif()

option(LLVM_BSPRIV_COMMON_COALESCER "Enable BiSheng RegisterCoalescer features" OFF)
if(LLVM_BSPRIV_COMMON_COALESCER)
  set(LLVM_BSPRIV_COMMON_COALESCER 1)
  add_definitions( -DBSPRIV_COMMON_COALESCER )
else()
  set(LLVM_BSPRIV_COMMON_COALESCER 0)
endif()

option(LLVM_BSPRIV_COMMON_CODE_MOVER_UTILS "Enable BiSheng CodeMoverUtils features" OFF)
if(LLVM_BSPRIV_COMMON_CODE_MOVER_UTILS)
  set(LLVM_BSPRIV_COMMON_CODE_MOVER_UTILS 1)
  add_definitions( -DBSPRIV_COMMON_CODE_MOVER_UTILS )
else()
  set(LLVM_BSPRIV_COMMON_CODE_MOVER_UTILS 0)
endif()

option(LLVM_BSPRIV_COMMON_COMPILER_RT "Enable BiSheng Compiler-RT features" OFF)
if (LLVM_BSPRIV_COMMON_COMPILER_RT)
  set(LLVM_BSPRIV_COMMON_COMPILER_RT 1)
  add_definitions(-DBSPRIV_COMMON_COMPILER_RT)
else()
  set(LLVM_BSPRIV_COMMON_COMPILER_RT 0)
endif()

option(LLVM_BSPRIV_PROFILE_INIT_ATFORK "Enable profile initialization in child after fork" ON)
if (LLVM_BSPRIV_PROFILE_INIT_ATFORK OR OHOS)
  set(LLVM_BSPRIV_PROFILE_INIT_ATFORK 1)
  add_definitions(-DBSPRIV_PROFILE_INIT_ATFORK)
else()
  set(LLVM_BSPRIV_PROFILE_INIT_ATFORK 0)
endif()

option(LLVM_BSPRIV_COMMON_CORRELATED_VALUE_PROPAGATION "Enable BiSheng CorrelatedValuePropagation features" OFF)
if(LLVM_BSPRIV_COMMON_CORRELATED_VALUE_PROPAGATION)
  set(LLVM_BSPRIV_COMMON_CORRELATED_VALUE_PROPAGATION 1)
  add_definitions( -DBSPRIV_COMMON_CORRELATED_VALUE_PROPAGATION )
else()
  set(LLVM_BSPRIV_COMMON_CORRELATED_VALUE_PROPAGATION 0)
endif()

option(LLVM_BSPRIV_COMMON_SAMPLE_PGO "Enable BiSheng Sample PGO features" ON)
if(LLVM_BSPRIV_COMMON_SAMPLE_PGO)
  set(LLVM_BSPRIV_COMMON_SAMPLE_PGO 1)
  add_definitions(-DBSPRIV_COMMON_SAMPLE_PGO)
else()
  set(LLVM_BSPRIV_COMMON_SAMPLE_PGO 0)
endif()

option(LLVM_BSPRIV_COMMON_DDG "Enable BiSheng Data-Dependence Graph features" OFF)
if (LLVM_BSPRIV_COMMON_DDG)
  set(LLVM_BSPRIV_COMMON_DDG 1)
  add_definitions(-DBSPRIV_COMMON_DDG)
else()
  set(LLVM_BSPRIV_COMMON_DDG 0)
endif()

option(LLVM_BSPRIV_COMMON_DEPENDENCE_ANALYSIS "Enable BiSheng DependenceAnalysis features" OFF)
if (LLVM_BSPRIV_COMMON_DEPENDENCE_ANALYSIS)
  set(LLVM_BSPRIV_COMMON_DEPENDENCE_ANALYSIS 1)
  add_definitions( -DBSPRIV_COMMON_DEPENDENCE_ANALYSIS )
else()
  set(LLVM_BSPRIV_COMMON_DEPENDENCE_ANALYSIS 0)
endif()

option(LLVM_BSPRIV_COMMON_FUNCTION_ATTRS "Enable BiSheng FunctionAttrs features" OFF)
if(LLVM_BSPRIV_COMMON_FUNCTION_ATTRS)
  set(LLVM_BSPRIV_COMMON_FUNCTION_ATTRS 1)
  add_definitions( -DBSPRIV_COMMON_FUNCTION_ATTRS )
else()
  set(LLVM_BSPRIV_COMMON_FUNCTION_ATTRS 0)
endif()

option(LLVM_BSPRIV_COMMON_FUNCTION_LOOP_FUSION "Enable BiSheng FunctionFusion and LoopFuse features" OFF)
if (LLVM_BSPRIV_COMMON_FUNCTION_LOOP_FUSION)
  set(LLVM_BSPRIV_COMMON_FUNCTION_LOOP_FUSION 1)
  add_definitions( -DBSPRIV_COMMON_FUNCTION_LOOP_FUSION )
else()
  set(LLVM_BSPRIV_COMMON_FUNCTION_LOOP_FUSION 0)
endif()

option(LLVM_BSPRIV_COMMON_FUNCTION_SPECIALIZATION "Enable BiSheng FunctionSpecialization features" OFF)
if (LLVM_BSPRIV_COMMON_FUNCTION_SPECIALIZATION)
  set(LLVM_BSPRIV_COMMON_FUNCTION_SPECIALIZATION 1)
  add_definitions( -DBSPRIV_COMMON_FUNCTION_SPECIALIZATION )
else()
  set(LLVM_BSPRIV_COMMON_FUNCTION_SPECIALIZATION 0)
endif()

option(LLVM_BSPRIV_COMMON_GEP "Enable BiSheng GetElementPointer features" OFF)
if (LLVM_BSPRIV_COMMON_GEP)
  set(LLVM_BSPRIV_COMMON_GEP 1)
  add_definitions(-DBSPRIV_COMMON_GEP)
else()
  set(LLVM_BSPRIV_COMMON_GEP 0)
endif()

option(LLVM_BSPRIV_COMMON_GPU_DELEGATE "Enable BiSheng GPU delegate features" OFF)
if (LLVM_BSPRIV_COMMON_GPU_DELEGATE)
  set(LLVM_BSPRIV_COMMON_GPU_DELEGATE 1)
  add_definitions( -DBSPRIV_COMMON_GPU_DELEGATE )
else()
  set(LLVM_BSPRIV_COMMON_GPU_DELEGATE 0)
endif()

option(LLVM_BSPRIV_COMMON_GVN "Enable BiSheng Global Value Numbering features" OFF)
if (LLVM_BSPRIV_COMMON_GVN)
  set(LLVM_BSPRIV_COMMON_GVN 1)
  add_definitions(-DBSPRIV_COMMON_GVN)
else()
  set(LLVM_BSPRIV_COMMON_GVN 0)
endif()

option(LLVM_BSPRIV_COMMON_HASH_DATA_PREFETCH "Enable BiSheng HashDataPrefetch features" OFF)
if (LLVM_BSPRIV_COMMON_HASH_DATA_PREFETCH)
  set(LLVM_BSPRIV_COMMON_HASH_DATA_PREFETCH 1)
  add_definitions( -DBSPRIV_COMMON_HASH_DATA_PREFETCH )
else()
  set(LLVM_BSPRIV_COMMON_HASH_DATA_PREFETCH 0)
endif()

option(LLVM_BSPRIV_COMMON_IND_VAR_SIMPLIFY "Enable BiSheng IndVarSimplify features" OFF)
if(LLVM_BSPRIV_COMMON_IND_VAR_SIMPLIFY)
  set(LLVM_BSPRIV_COMMON_IND_VAR_SIMPLIFY 1)
  add_definitions( -DBSPRIV_COMMON_IND_VAR_SIMPLIFY )
else()
  set(LLVM_BSPRIV_COMMON_IND_VAR_SIMPLIFY 0)
endif()

option(LLVM_BSPRIV_COMMON_INLINE "Enable BiSheng Inlining features" OFF)
if (LLVM_BSPRIV_COMMON_INLINE)
  set(LLVM_BSPRIV_COMMON_INLINE 1)
  add_definitions(-DBSPRIV_COMMON_INLINE)
else()
  set(LLVM_BSPRIV_COMMON_INLINE 0)
endif()

option(LLVM_BSPRIV_COMMON_INST_PREFETCH "Enable Instruction Prefetching feature " ON)
if (LLVM_BSPRIV_COMMON_INST_PREFETCH)
  set(LLVM_BSPRIV_COMMON_INST_PREFETCH 1)
  add_definitions(-DBSPRIV_COMMON_INST_PREFETCH)
else()
  set(LLVM_BSPRIV_COMMON_INST_PREFETCH 0)
endif()

option(LLVM_BSPRIV_COMMON_IPOP "Enable Interprocedural Object Prefetching feature" ON)
if (LLVM_BSPRIV_COMMON_IPOP)
  set(LLVM_BSPRIV_COMMON_IPOP 1)
  add_definitions(-DBSPRIV_COMMON_IPOP)
else()
  set(LLVM_BSPRIV_COMMON_IPOP 0)
endif()

option(LLVM_BSPRIV_COMMON_IR_LIBRARY_INJECTION "Enable BiSheng IRLibraryInjection features" OFF)
if (LLVM_BSPRIV_COMMON_IR_LIBRARY_INJECTION)
  set(LLVM_BSPRIV_COMMON_IR_LIBRARY_INJECTION 1)
  add_definitions(-DBSPRIV_COMMON_IR_LIBRARY_INJECTION)
else()
  set(LLVM_BSPRIV_COMMON_IR_LIBRARY_INJECTION 0)
endif()

option(LLVM_BSPRIV_COMMON_IVDEP "Enable BiSheng IVDep features" OFF)
if (LLVM_BSPRIV_COMMON_IVDEP)
  set(LLVM_BSPRIV_COMMON_IVDEP 1)
  add_definitions(-DBSPRIV_COMMON_IVDEP)
else()
  set(LLVM_BSPRIV_COMMON_IVDEP 0)
endif()

option(LLVM_BSPRIV_COMMON_IV_DESCRIPTOR "Enable BiSheng IV Descriptor features" OFF)
if(LLVM_BSPRIV_COMMON_IV_DESCRIPTOR)
  set(LLVM_BSPRIV_COMMON_IV_DESCRIPTOR 1)
  add_definitions( -DBSPRIV_COMMON_IV_DESCRIPTOR )
else()
  set(LLVM_BSPRIV_COMMON_IV_DESCRIPTOR 0)
endif()

option(LLVM_BSPRIV_COMMON_LAZY_VALUE_INFO "Enable BiSheng LazyValueInfo features" OFF)
if(LLVM_BSPRIV_COMMON_LAZY_VALUE_INFO)
  set(LLVM_BSPRIV_COMMON_LAZY_VALUE_INFO 1)
  add_definitions( -DBSPRIV_COMMON_LAZY_VALUE_INFO )
else()
  set(LLVM_BSPRIV_COMMON_LAZY_VALUE_INFO 0)
endif()

option(LLVM_BSPRIV_COMMON_LICM "Enable BiSheng Loop Invariant Code Motion features" OFF)
if (LLVM_BSPRIV_COMMON_LICM)
  set(LLVM_BSPRIV_COMMON_LICM 1)
  add_definitions(-DBSPRIV_COMMON_LICM)
else()
  set(LLVM_BSPRIV_COMMON_LICM 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_DATA_PREFETCH "Enable BiSheng LoopDataPrefetch features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_DATA_PREFETCH)
  set(LLVM_BSPRIV_COMMON_LOOP_DATA_PREFETCH 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_DATA_PREFETCH )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_DATA_PREFETCH 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_DISTRIBUTE "Enable BiSheng LoopDistribute features" OFF)
if(LLVM_BSPRIV_COMMON_LOOP_DISTRIBUTE)
  set(LLVM_BSPRIV_COMMON_LOOP_DISTRIBUTE 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_DISTRIBUTE )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_DISTRIBUTE 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_IDIOM_RECOGNIZE "Enable BiSheng LoopIdiomRecognize features" OFF)
if(LLVM_BSPRIV_COMMON_LOOP_IDIOM_RECOGNIZE)
  set(LLVM_BSPRIV_COMMON_LOOP_IDIOM_RECOGNIZE 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_IDIOM_RECOGNIZE )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_IDIOM_RECOGNIZE 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_INTERCHANGE "Enable BiSheng LoopInterchange features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_INTERCHANGE)
  set(LLVM_BSPRIV_COMMON_LOOP_INTERCHANGE 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_INTERCHANGE )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_INTERCHANGE 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_LOAD_ELIMINATION "Enable BiSheng LoopLoadElimination features" OFF)
if(LLVM_BSPRIV_COMMON_LOOP_LOAD_ELIMINATION)
  set(LLVM_BSPRIV_COMMON_LOOP_LOAD_ELIMINATION 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_LOAD_ELIMINATION )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_LOAD_ELIMINATION 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_LOAD_WIDEN "Enable BiSheng LoopLoadWiden features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_LOAD_WIDEN)
  set(LLVM_BSPRIV_COMMON_LOOP_LOAD_WIDEN 1)
  add_definitions(-DBSPRIV_COMMON_LOOP_LOAD_WIDEN)
else()
  set(LLVM_BSPRIV_COMMON_LOOP_LOAD_WIDEN 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_SPLIT "Enable BiSheng LoopSplit features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_SPLIT)
  set(LLVM_BSPRIV_COMMON_LOOP_SPLIT 1)
  add_definitions( -DBSPRIV_COMMON_LOOP_SPLIT )
else()
  set(LLVM_BSPRIV_COMMON_LOOP_SPLIT 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_STRENGTH_REDUCE "Enable BiSheng LoopStrengthReduce features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_STRENGTH_REDUCE)
  set(LLVM_BSPRIV_COMMON_LOOP_STRENGTH_REDUCE 1)
  add_definitions(-DBSPRIV_COMMON_LOOP_STRENGTH_REDUCE)
else()
  set(LLVM_BSPRIV_COMMON_LOOP_STRENGTH_REDUCE 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_TILING "Enable BiSheng LoopTiling features" OFF)
if (LLVM_BSPRIV_COMMON_LOOP_TILING)
  set(LLVM_BSPRIV_COMMON_LOOP_TILING 1)
  add_definitions(-DBSPRIV_COMMON_LOOP_TILING)
else()
  set(LLVM_BSPRIV_COMMON_LOOP_TILING 0)
endif()

option(LLVM_BSPRIV_COMMON_LOOP_VECTORIZE "Enable BiSheng LoopVectorize features" OFF)
if(LLVM_BSPRIV_COMMON_LOOP_VECTORIZE)
  if (NOT LLVM_BSPRIV_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_COMMON_LOOP_VECTORIZE=ON requires LLVM_BSPRIV_COMMON=ON")
  else()
    set(LLVM_BSPRIV_COMMON_LOOP_VECTORIZE 1)
    add_definitions( -DBSPRIV_COMMON_LOOP_VECTORIZE )
  endif()
else()
  set(LLVM_BSPRIV_COMMON_LOOP_VECTORIZE 0)
endif()

option(LLVM_BSPRIV_COMMON_MEMORY_SSA "Enable BiSheng MemorySSA features" OFF)
if(LLVM_BSPRIV_COMMON_MEMORY_SSA)
  set(LLVM_BSPRIV_COMMON_MEMORY_SSA 1)
  add_definitions( -DBSPRIV_COMMON_MEMORY_SSA )
else()
  set(LLVM_BSPRIV_COMMON_MEMORY_SSA 0)
endif()

option(LLVM_BSPRIV_COMMON_OPENMP "Enable BiSheng OpenMP features" OFF)
if (LLVM_BSPRIV_COMMON_OPENMP)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_COMMON_OPENMP=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_COMMON_OPENMP 1)
    add_definitions( -DBSPRIV_COMMON_OPENMP )
  endif()
else()
  set(LLVM_BSPRIV_COMMON_OPENMP 0)
endif()

option(LLVM_BSPRIV_COMMON_PROPAGATE_ALIGNMENT "Enable BiSheng PropagateAlignment features" OFF)
if (LLVM_BSPRIV_COMMON_PROPAGATE_ALIGNMENT)
  set(LLVM_BSPRIV_COMMON_PROPAGATE_ALIGNMENT 1)
  add_definitions( -DBSPRIV_COMMON_PROPAGATE_ALIGNMENT )
else()
  set(LLVM_BSPRIV_COMMON_PROPAGATE_ALIGNMENT 0)
endif()

option(LLVM_BSPRIV_COMMON_REASSOCIATE "Enable BiSheng Reassociate features" OFF)
if(LLVM_BSPRIV_COMMON_REASSOCIATE)
  set(LLVM_BSPRIV_COMMON_REASSOCIATE 1)
  add_definitions( -DBSPRIV_COMMON_REASSOCIATE )
else()
  set(LLVM_BSPRIV_COMMON_REASSOCIATE 0)
endif()

option(LLVM_BSPRIV_COMMON_REGALLOC_GREEDY "Enable BiSheng Greedy Register Allocator features" OFF)
if (LLVM_BSPRIV_COMMON_REGALLOC_GREEDY)
  set(LLVM_BSPRIV_COMMON_REGALLOC_GREEDY 1)
  add_definitions( -DBSPRIV_COMMON_REGALLOC_GREEDY )
else()
  set(LLVM_BSPRIV_COMMON_REGALLOC_GREEDY 0)
endif()

option(LLVM_BSPRIV_COMMON_SELECTION_DAG "Enable BiSheng SelectionDAG features" OFF)
if(LLVM_BSPRIV_COMMON_SELECTION_DAG)
  set(LLVM_BSPRIV_COMMON_SELECTION_DAG 1)
  add_definitions( -DBSPRIV_COMMON_SELECTION_DAG )
else()
  set(LLVM_BSPRIV_COMMON_SELECTION_DAG 0)
endif()

option(LLVM_BSPRIV_COMMON_SIMPLIFY_CFG "Enable BiSheng SimplifyCFG features" OFF)
if (LLVM_BSPRIV_COMMON_SIMPLIFY_CFG)
  set(LLVM_BSPRIV_COMMON_SIMPLIFY_CFG 1)
  add_definitions( -DBSPRIV_COMMON_SIMPLIFY_CFG )
else()
  set(LLVM_BSPRIV_COMMON_SIMPLIFY_CFG 0)
endif()

option(LLVM_BSPRIV_COMMON_SINK "Enable BiSheng Sink features" OFF)
if(LLVM_BSPRIV_COMMON_SINK)
  set(LLVM_BSPRIV_COMMON_SINK 1)
  add_definitions( -DBSPRIV_COMMON_SINK )
else()
  set(LLVM_BSPRIV_COMMON_SINK 0)
endif()

option(LLVM_BSPRIV_COMMON_SLP_VECTORIZER "Enable BiSheng SLP (Superword-Level Parallelism) features" OFF)
if (LLVM_BSPRIV_COMMON_SLP_VECTORIZER)
  set(LLVM_BSPRIV_COMMON_SLP_VECTORIZER 1)
  add_definitions( -DBSPRIV_COMMON_SLP_VECTORIZER )
else()
  set(LLVM_BSPRIV_COMMON_SLP_VECTORIZER 0)
endif()

option(LLVM_BSPRIV_COMMON_STRUCT_PEELING "Enable BiSheng StructPeeling features" OFF)
if(LLVM_BSPRIV_COMMON_STRUCT_PEELING)
  set(LLVM_BSPRIV_COMMON_STRUCT_PEELING 1)
  add_definitions( -DBSPRIV_COMMON_STRUCT_PEELING )
else()
  set(LLVM_BSPRIV_COMMON_STRUCT_PEELING 0)
endif()

option(LLVM_BSPRIV_COMMON_STRUCT_REPACKING "Enable BiSheng StructRepacking features" OFF)
if (LLVM_BSPRIV_COMMON_STRUCT_REPACKING)
  set(LLVM_BSPRIV_COMMON_STRUCT_REPACKING 1)
  add_definitions( -DBSPRIV_COMMON_STRUCT_REPACKING )
else()
  set(LLVM_BSPRIV_COMMON_STRUCT_REPACKING 0)
endif()

option(LLVM_BSPRIV_COMMON_UNROLL "Enable BiSheng Unroll features" OFF)
if (LLVM_BSPRIV_COMMON_UNROLL)
  set(LLVM_BSPRIV_COMMON_UNROLL 1)
  add_definitions( -DBSPRIV_COMMON_UNROLL )
else()
  set(LLVM_BSPRIV_COMMON_UNROLL 0)
endif()

option(LLVM_BSPRIV_COMMON_VECTOR_COMBINE "Enable BiSheng VectorCombine features" OFF)
if(LLVM_BSPRIV_COMMON_VECTOR_COMBINE)
  set(LLVM_BSPRIV_COMMON_VECTOR_COMBINE 1)
  add_definitions( -DBSPRIV_COMMON_VECTOR_COMBINE )
else()
  set(LLVM_BSPRIV_COMMON_VECTOR_COMBINE 0)
endif()

option(LLVM_BSPRIV_AARCH64_PLT_INLINING "Enable PLT Inlining feature" off)
if (LLVM_BSPRIV_AARCH64_PLT_INLINING)
  set(LLVM_BSPRIV_AARCH64_PLT_INLINING 1)
  add_definitions(-DBSPRIV_AARCH64_PLT_INLINING)
else()
  set(LLVM_BSPRIV_AARCH64_PLT_INLINING 0)
endif()

### TARGET-RELATED OPTIONS ####################################################

option(LLVM_BSPUB_RISCV "Build support for classic RISCV instead of the new built-in RISCV" OFF)
if(LLVM_BSPUB_RISCV)
  set(LLVM_BSPUB_RISCV 1)
  add_definitions( -DBSPUB_RISCV )
else()
  set(LLVM_BSPUB_RISCV 0)
endif()

option(LLVM_BSPRIV_DAVINCI "Enable Davinci-specific features" OFF)
if(LLVM_BSPRIV_DAVINCI)
  set(LLVM_BSPRIV_DAVINCI 1)
  add_definitions( -DBSPRIV_DAVINCI )
else()
  set(LLVM_BSPRIV_DAVINCI 0)
endif()

option(LLVM_BSPRIV_AARCH64 "Enable BiSheng AArch64 architecture-related features" OFF)
if (LLVM_BSPRIV_AARCH64)
  set(LLVM_BSPRIV_AARCH64 1)
  add_definitions( -DBSPRIV_AARCH64 )
else()
  set(LLVM_BSPRIV_AARCH64 0)
endif()

option(LLVM_BSPRIV_AARCH64_ARM83_OPTIONS "Enable BiSheng implementation of optional ARMv8.3 instructions" OFF)
# Optional ARMv8.3-A features such as FeatureJS and FeatureComplxNum are
# enabled if either AArch64 or Davinci is enabled.
if (LLVM_BSPRIV_AARCH64_ARM83_OPTIONS OR LLVM_BSPRIV_AARCH64 OR LLVM_BSPRIV_DAVINCI)
  set(LLVM_BSPRIV_AARCH64_ARM83_OPTIONS 1)
  add_definitions( -DBSPRIV_AARCH64_ARM83_OPTIONS )
else()
  set(LLVM_BSPRIV_AARCH64_ARM83_OPTIONS 0)
endif()

option(LLVM_BSPRIV_AARCH64_COMPLEX "Enable BiSheng Complex features" OFF)
if (LLVM_BSPRIV_AARCH64_COMPLEX)
  set(LLVM_BSPRIV_AARCH64_COMPLEX 1)
  add_definitions( -DBSPRIV_AARCH64_COMPLEX )
else()
  set(LLVM_BSPRIV_AARCH64_COMPLEX 0)
endif()

option(LLVM_BSPRIV_AARCH64_CONDITION_OPTIMIZER "Enable BiSheng AArch64ConditionOptimizer features" OFF)
if(LLVM_BSPRIV_AARCH64_CONDITION_OPTIMIZER)
  set(LLVM_BSPRIV_AARCH64_CONDITION_OPTIMIZER 1)
  add_definitions( -DBSPRIV_AARCH64_CONDITION_OPTIMIZER )
else()
  set(LLVM_BSPRIV_AARCH64_CONDITION_OPTIMIZER 0)
endif()

option(LLVM_BSPRIV_AARCH64_HBM "Enable BiSheng HBM features" OFF)
if(LLVM_BSPRIV_AARCH64_HBM)
  set(LLVM_BSPRIV_AARCH64_HBM 1)
  add_definitions( -DBSPRIV_AARCH64_HBM )
else()
  set(LLVM_BSPRIV_AARCH64_HBM 0)
endif()

option(LLVM_BSPRIV_AARCH64_ILP32 "Enable BiSheng ILP32 features" OFF)
if (LLVM_BSPRIV_AARCH64_ILP32)
  set(LLVM_BSPRIV_AARCH64_ILP32 1)
  add_definitions(-DBSPRIV_AARCH64_ILP32)
else()
  set(LLVM_BSPRIV_AARCH64_ILP32 0)
endif()

option(LLVM_BSPRIV_AARCH64_LINX "Enable BiSheng LINX CPU features" OFF)
if (LLVM_BSPRIV_AARCH64_LINX)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_AARCH64_LINX=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_AARCH64_LINX 1)
    add_definitions(-DBSPRIV_AARCH64_LINX)
  endif()
else()
  set(LLVM_BSPRIV_AARCH64_LINX 0)
endif()

option(LLVM_BSPRIV_AARCH64_MATH_LIBS "Enable BiSheng SIMD Library features" OFF)
if (LLVM_BSPRIV_AARCH64_MATH_LIBS)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_AARCH64_MATH_LIBS=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_AARCH64_MATH_LIBS 1)
    add_definitions(-DBSPRIV_AARCH64_MATH_LIBS)
  endif()
else()
  set(LLVM_BSPRIV_AARCH64_MATH_LIBS 0)
endif()

option(LLVM_BSPRIV_AARCH64_PRECISION "Enable BiSheng Precision features" OFF)
if (LLVM_BSPRIV_AARCH64_PRECISION)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_AARCH64_PRECISION=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_AARCH64_PRECISION 1)
    add_definitions( -DBSPRIV_AARCH64_PRECISION )
  endif()
else()
  set(LLVM_BSPRIV_AARCH64_PRECISION 0)
endif()

option(LLVM_BSPRIV_AARCH64_SCHEDULING "Enable BiSheng Instruction Scheduling features" OFF)
if (LLVM_BSPRIV_AARCH64_SCHEDULING)
  set(LLVM_BSPRIV_AARCH64_SCHEDULING 1)
  add_definitions(-DBSPRIV_AARCH64_SCHEDULING)
else()
  set(LLVM_BSPRIV_AARCH64_SCHEDULING 0)
endif()

option(LLVM_BSPRIV_AARCH64_SME "Enable BiSheng Scalable Matrix Extension features" OFF)
if (LLVM_BSPRIV_AARCH64_SME)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_AARCH64_SME=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_AARCH64_SME 1)
    add_definitions(-DBSPRIV_AARCH64_SME)
  endif()
else()
  set(LLVM_BSPRIV_AARCH64_SME 0)
endif()

option(LLVM_BSPRIV_AARCH64_SPECULATION_HARDENING "Enable BiSheng Spectre Attack Mitigation features" OFF)
if (LLVM_BSPRIV_AARCH64_SPECULATION_HARDENING)
  if (NOT LLVM_BSPUB_COMMON)
    message(FATAL_ERROR "LLVM_BSPRIV_AARCH64_SPECULATION_HARDENING=ON requires LLVM_BSPUB_COMMON=ON")
  else()
    set(LLVM_BSPRIV_AARCH64_SPECULATION_HARDENING 1)
    add_definitions(-DBSPRIV_AARCH64_SPECULATION_HARDENING)
  endif()
else()
  set(LLVM_BSPRIV_AARCH64_SPECULATION_HARDENING 0)
endif()

### FRONTEND-RELATED OPTIONS ###################################################

option(LLVM_ENABLE_CLASSIC_FLANG "Build support for classic Flang instead of the new built-in Flang" OFF)
if(LLVM_ENABLE_CLASSIC_FLANG)
  set(LLVM_ENABLE_CLASSIC_FLANG 1)
  add_definitions( -DENABLE_CLASSIC_FLANG )
else()
  set(LLVM_ENABLE_CLASSIC_FLANG 0)
endif()
