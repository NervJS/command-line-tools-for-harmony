"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray = Array.isArray;
/**
 * 如果number小于max则返回number，否则返回max，即基于number返回不超过max的值
 * @param number
 * @param max
 * @return 返回不超过max的值
 */
function getValueNoMoreThanMax(number, max) {
    return number < max ? number : max;
}
/**
 * 对clamp函数的输入做一些处理，主要是处理数组类型。
 * 如果输入是长度为1的数组arr，则认为数组值是arr[0]（强转为number），如果长度为0则认为是0，其他长度的数组都认为是NaN
 * @param input
 */
function handleArrayInput(input) {
    if (isArray(input)) {
        var length_1 = input.length;
        if (length_1 === 0) {
            return 0;
        }
        return input.length === 1 ? Number(input[0]) : NaN;
    }
    return Number(input);
}
/**
 * 返回对目标数字进行范围限制后的数
 * @param rawNum，目标数字
 * @param lower，范围的下限
 * @param upper，范围的上限
 * @return number  如果目标数字在限制范围之间则返回目标数字，若低于lower则返回lower，若高于upper则返回upper
 */
function clamp(rawNum, lower, upper) {
    // 首先对输入进行转换处理
    var number = handleArrayInput(rawNum);
    var min = handleArrayInput(lower);
    var max = handleArrayInput(upper);
    var isNaN = Number.isNaN;
    var isNumNaN = isNaN(number);
    var isMinNaN = isNaN(min);
    var isMaxNaN = isNaN(max);
    min = isMinNaN ? 0 : min;
    max = isMaxNaN ? 0 : max;
    // 只要rawNum不可强转为number类型，则没有比较的意义，一定返回NaN
    if (isNumNaN) {
        return NaN;
    }
    if (lower === undefined) {
        if (upper === undefined) {
            return number;
        }
        // lower是undefined但upper不是，则把max当成不可超越的最大值
        return getValueNoMoreThanMax(number, max);
    }
    else if (upper === undefined) {
        // upper是undefined但lower不是，则把min当成不可超越的最大值
        return getValueNoMoreThanMax(number, min);
    }
    // 到这里，三个入参都不是undefined，且rawNumber一定可以强转为数字类型
    if (max < min) {
        // upper和lower大小顺序颠倒，没有比较意义，直接返回min
        return min;
    }
    // 正常对比number,min和max
    if (number < min) {
        return min;
    }
    else if (number < max) {
        return number;
    }
    return max;
}
exports.default = clamp;
