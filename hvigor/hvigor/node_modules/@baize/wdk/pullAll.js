"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isNil_1 = __importDefault(require("./isNil"));
var sameValueZero_1 = __importDefault(require("./common/sameValueZero"));
/**
 * 移除数组array中所有和数组中的值相同的元素，使用SameValueZero 进行全等比较。
 * Note: 这个方法不同于 difference ，他会改变 array
 * @since 1.0.0
 * @param array (Array): 要修改的数组。
 * @param values (Array): 要移除值的数组。
 * @returns (Array): 返回 array。
 * @example
 * var array = [1, 2, 3, 1, 2, 3];
 *
 * _.pullAll(array, [2, 3]);
 * console.log(array);
 * // => [1, 1]
 */
function pullAll(array, values) {
    if (isEnsureEmpty(array) || isEnsureEmpty(values)) {
        return array;
    }
    if (array === values) {
        array.length = 0;
        return array;
    }
    var len = values.length;
    var index = -1;
    while (++index < len) {
        var item = values[index];
        var findIdx = 0;
        while ((findIdx = indexOf(array, item, findIdx)) > -1) {
            array.splice(findIdx, 1);
        }
    }
    return array;
}
exports.default = pullAll;
function isEnsureEmpty(array) {
    return (0, isNil_1.default)(array) || array.length === 0;
}
function indexOf(array, value, fromIndex) {
    var index = fromIndex - 1;
    var length = array.length;
    while (++index < length) {
        if ((0, sameValueZero_1.default)(array[index], value)) {
            return index;
        }
    }
    return -1;
}
