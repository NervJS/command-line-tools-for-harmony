"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 遍历指定集合中每个元素，根据运算每个元素生成对应的key，得到key和元素的映射关系，如若生成重复的key值只取最后一个生成该key值的元素
 * 返回一个对象，包含上述映射关系中的key值和对应的元素
 * @param collection，要遍历的集合，如果是一个对象，则将对象的所有value组成一个集合
 * @param iterator，运算规则，集合中每个元素根据此运算规则得到key值
 * @return 一个对象，包含上述映射关系中的key值和对应的元素
 */
function keyBy(collection, iterator) {
    var list = collection; // 真正需要遍历的集合
    if (Object.prototype.toString.call(collection) === '[object Object]') {
        list = Object.keys(collection).map(function (key) { return collection[key]; });
    }
    var result = {}; // 最终要返回的对象
    // 根据iterator具体类型，以不同方式生成ele的key
    var getKey = function (ele) { return ele; };
    var type = typeof iterator;
    if (type === 'function') {
        getKey = function (ele) { return iterator(ele); };
    }
    else if (type === 'string' || type === 'number') {
        getKey = function (ele) { return ele[iterator]; };
    }
    list.forEach(function (ele) {
        result[getKey(ele)] = ele;
    });
    return result;
}
exports.default = keyBy;
