"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assignIn_1 = __importDefault(require("./assignIn"));
var stringToPaths_1 = __importDefault(require("./common/stringToPaths"));
var utils_1 = require("./common/utils");
var isEmpty_1 = __importDefault(require("./isEmpty"));
var pick_1 = require("./pick");
var toString_1 = __importDefault(require("./toString"));
function checkKeyExist(key, filters) {
    var e_1, _a;
    try {
        for (var filters_1 = __values(filters), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
            var eachFilter = filters_1_1.value;
            if (key === eachFilter) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (filters_1_1 && !filters_1_1.done && (_a = filters_1.return)) _a.call(filters_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
function getNestedRest(input, preKey, filters) {
    if (filters.length === 0) {
        return (0, assignIn_1.default)({}, input);
    }
    var newObj = {};
    var keys = (0, pick_1.getObjectKeys)(input);
    filters.forEach(function (filter) {
        var depth = 1;
        if (typeof filter === 'string') {
            depth = (0, stringToPaths_1.default)(filter).length;
        }
        keys.forEach(function (eachKey) {
            var realKey = "".concat((0, toString_1.default)(preKey), ".").concat((0, toString_1.default)(eachKey));
            if (!checkKeyExist(realKey, filters) && Object.getOwnPropertyDescriptor(input, eachKey).enumerable) {
                var valueIsObject = Object.prototype.toString.call(input[eachKey]) === '[object Object]';
                if (!valueIsObject) {
                    newObj[eachKey] = input[eachKey];
                }
                else {
                    var res = getRestValues(input[eachKey], realKey, filters, depth);
                    if (!(0, isEmpty_1.default)(res)) {
                        newObj[eachKey] = res;
                    }
                }
            }
        });
    });
    return newObj;
}
function getRestValues(input, preKey, filters, depth) {
    var newObj = {};
    (0, pick_1.getObjectKeys)(input).forEach(function (eachKey) {
        var realKey = "".concat((0, toString_1.default)(preKey), ".").concat((0, toString_1.default)(eachKey));
        if (!checkKeyExist(realKey, filters) && Object.getOwnPropertyDescriptor(input, eachKey).enumerable) {
            var valueIsObject = Object.prototype.toString.call(input[eachKey]) === '[object Object]';
            if (!valueIsObject || depth === 1) {
                newObj[eachKey] = input[eachKey];
            }
            else {
                var res = getRestValues(input[eachKey], realKey, filters, depth - 1);
                if (!(0, isEmpty_1.default)(res)) {
                    newObj[eachKey] = res;
                }
            }
        }
    });
    return newObj;
}
function setPropsToResult(input, filters, result) {
    var e_2, _a;
    // 按照对象的层次，一层一层的比较对比
    var inputKeyObjMaps = new Map();
    var keys = (0, pick_1.getObjectKeys)(input);
    var restFilters = [].concat.apply([], __spreadArray([], __read(filters), false));
    var _loop_1 = function (key) {
        if (checkKeyExist(key, filters)) {
            /*
             * 在第一轮找到的 key ，先从 filter 中去掉，避免后续在 nest 对象中，含义发生了变化。
             * 例如，a.b 在第一轮如果找到，那么 a.b 就代表一个字符串，而不是作为 a/b 这种path
             */
            restFilters = restFilters.filter(function (v) { return v !== key; });
            return "continue";
        }
        if (!Object.getOwnPropertyDescriptor(input, key).enumerable) {
            return "continue";
        }
        if ((0, utils_1.tagName)(input[key]) !== '[object Object]') {
            result[key] = input[key];
        }
        else {
            // 嵌套对象
            inputKeyObjMaps.set(key, input[key]);
        }
    };
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            _loop_1(key);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    inputKeyObjMaps.forEach(function (value, key) {
        var res = getNestedRest(value, key, restFilters);
        if (!(0, isEmpty_1.default)(res)) {
            result[key] = res;
        }
    });
}
/**
 * 处理普通对象、及其原型对象
 * @param input
 * @param ignoreList
 */
function processCommonObject(input, ignoreList) {
    var result = {};
    setPropsToResult(input, ignoreList, result);
    // input的原型对象
    var protoTypeOfObj = Object.getPrototypeOf(input);
    if (Array.isArray(protoTypeOfObj) || protoTypeOfObj === null) {
        return result;
    }
    setPropsToResult(protoTypeOfObj, ignoreList, result);
    return result;
}
/**
 * 处理有嵌套属性的对象、及其原型对象
 * @param input
 * @param ignoreList
 */
function processNestedObject(input, ignoreList) {
    var result = {};
    setPropsToResult(input, ignoreList, result);
    // input的原型对象
    var protoTypeOfObj = Object.getPrototypeOf(input);
    if (protoTypeOfObj !== null) {
        setPropsToResult(protoTypeOfObj, ignoreList, result);
    }
    return result;
}
/**
 * 创建一个从 object 中忽略的属性的对象，返回忽略属性后的新对象
 * 反向版pick。这个对象由忽略属性之外的object自身和继承的可枚举属性组成。（注：可以理解为删除object对象的属性）。
 * @param input 来源对象
 * @param ignoreProps 保留的属性
 */
function omit(input) {
    var ignoreProps = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        ignoreProps[_i - 1] = arguments[_i];
    }
    if (input === null || input === undefined) {
        return {};
    }
    var ignoreList = (0, pick_1.getFilters)(ignoreProps);
    if (!(0, pick_1.checkIsNestedObject)(input)) {
        return processCommonObject(input, ignoreList);
    }
    return processNestedObject(input, ignoreList);
}
exports.default = omit;
