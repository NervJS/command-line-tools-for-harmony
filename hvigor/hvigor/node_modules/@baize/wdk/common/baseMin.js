"use strict";
/*
 * 基础min函数，wdk.min和wdk.minBy都依赖、调用该函数
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var identity_1 = __importDefault(require("../identity"));
var isNil_1 = __importDefault(require("../isNil"));
var isNaN_1 = __importDefault(require("../isNaN"));
/**
 * 计算数组所有元素中经iteratee转换后的最小值，并返回第一个转换为该最小值的元素的值。
 * 如果数组为空或者为虚值，则返回 undefined.
 * @Catalog core
 * @param array {Array<any>} 待计算的数组
 * @param iteratee 用于转换数组元素的值，默认为identity
 * @returns any | undefined 返回array中第一个转换为最小值的元素的值
 */
function baseMin(array, iteratee) {
    if (iteratee === void 0) { iteratee = identity_1.default; }
    if (array && typeof array !== 'number' && array.length > 0) {
        var index_1 = 0;
        var minValue_1 = iteratee(array[index_1]);
        array.forEach(function (c, newIndex) {
            var newValue = iteratee(c);
            if (minValue_1 > newValue || (0, isNil_1.default)(minValue_1) || (0, isNaN_1.default)(minValue_1)) {
                minValue_1 = newValue;
                index_1 = newIndex;
            }
        });
        return array[index_1];
    }
    return undefined;
}
exports.default = baseMin;
