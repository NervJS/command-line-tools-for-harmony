"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRealIterateeWithIdentityDefault = exports.getObjectKeysWithProtoChain = exports.toStringWithZeroSign = exports.falsey = exports.whiteSpace = exports.tagName = void 0;
var identity_1 = __importDefault(require("../identity"));
var property_1 = __importDefault(require("../property"));
/**
 * 获取指定对象的对象名称，例如
 * const a = 10;
 * getObjTagName(a); // => [object Number]
 * @param object
 */
function tagName(object) {
    if (object === null) {
        return '[object Null]';
    }
    if (object === undefined) {
        return '[object Undefined]';
    }
    var toString = Object.prototype.toString;
    return toString.apply(object);
}
exports.tagName = tagName;
exports.whiteSpace = [' ', '\t', '\x0b', '\f', '\xa0', '\ufeff', '\n', '\r', '\u2028', '\u2029', '\u1680',
    '\u180e', '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006', '\u2007', '\u2008', '\u2009',
    '\u200a', '\u202f', '\u205f', '\u3000',
];
/**
 * 虚值数组
 */
exports.falsey = [null, undefined, false, 0, NaN, ''];
// 将value转为字符串，但保留0的符号位，-0以及Object(-0)将转为'-0'，同时也保留symbol
var toStringWithZeroSign = function (value) {
    if (typeof value === 'symbol') {
        return value;
    }
    if (Object.is(-0, value)
        || (value instanceof Number && Object.is(-0, Number(value)))) {
        return '-0';
    }
    return String(value);
};
exports.toStringWithZeroSign = toStringWithZeroSign;
/**
 * 获得obj及其原型链上的所有可枚举属性
 * @param obj
 * @return obj及其原型链上所有属性组成的数组
 */
function getObjectKeysWithProtoChain(obj) {
    var keys = [];
    if (obj == null) {
        return keys;
    }
    for (var k in obj) {
        if (k) {
            keys.push(k);
        }
    }
    return keys;
}
exports.getObjectKeysWithProtoChain = getObjectKeysWithProtoChain;
/**
 * 根据原始iteratee获得真正有效的realIteratee。
 * 如果iteratee是nullish，realIteratee将使用默认值identity
 * 如果iteratee是string类型，realIteratee将使用property
 * @param iteratee
 * @return 真正有效的realIteratee
 */
function getRealIterateeWithIdentityDefault(iteratee) {
    // 真正用于映射的函数，如果iteratee是nullish则使用默认值identity
    var realIteratee = identity_1.default;
    var typeOfIteratee = typeof iteratee;
    if (typeOfIteratee === 'function') {
        realIteratee = iteratee;
    }
    else if (typeOfIteratee === 'string') {
        realIteratee = (0, property_1.default)(iteratee);
    }
    return realIteratee;
}
exports.getRealIterateeWithIdentityDefault = getRealIterateeWithIdentityDefault;
