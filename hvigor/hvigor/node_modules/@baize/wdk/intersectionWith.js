"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var validCheck_1 = require("./common/validCheck");
var isNaN_1 = __importDefault(require("./isNaN"));
/**
 * 使用comparator判断element是否和array中某个元素匹配，匹配则认为element在array中存在
 * @param array，要匹配的数组
 * @param element，一个任意值，要匹配的元素
 * @param comparator，用于断言两个元素是否匹配
 * @return 返回一个boolean值，表示element是否在array中存在（匹配上array中某个元素）
 */
function isElementExistInArray(array, element, comparator) {
    return array.findIndex(function (v) { return comparator(element, v); }) !== -1;
}
/**
 * 默认的比较器，如果intersectionWith没有接受任何比较器则使用默认比较器
 */
var defaultComparator = function (a, b) { return a === b || ((0, isNaN_1.default)(a) && (0, isNaN_1.default)(b)); };
/**
 * 取所有array数组中的交集元素。过程中使用comparator来判断两个元素是否相匹配（匹配即认为相等）。
 * 对于交集的元素会去重，即只会取交集元素中最先出现的那个元素
 * @param arraysAndComparator，所有的输入数组以及comparator（如有）
 * @return 返回包含所有输入数组元素取交集并去重后的元素所组成的新数组
 */
function intersectionWith() {
    var arraysAndComparator = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arraysAndComparator[_i] = arguments[_i];
    }
    var length = arraysAndComparator.length;
    var lastElement = arraysAndComparator[length - 1];
    var arrays = arraysAndComparator;
    var comparator = defaultComparator;
    if (typeof lastElement === 'function' && length > 1) {
        comparator = lastElement;
        arrays = arraysAndComparator.slice(0, length - 1);
    }
    // result是最终返回的结果
    var result = [];
    var isArray = Array.isArray;
    // 如果入参中有不是数组的，直接返回[]
    if (arrays.findIndex(function (array) { return !isArray(array) && !(0, validCheck_1.isArguments)(array); }) !== -1) {
        return result;
    }
    // 将arguments类型的输入转为普通数组
    arrays = arrays.map(function (array) { return __spreadArray([], __read(array), false); });
    // 如果没有传入comparator，则将所有-0元素当做0看待
    if (comparator === defaultComparator) {
        arrays = arrays.map(function (array) { return array.map(function (el) { return (el === 0 ? 0 : el); }); });
    }
    var firstArray = arrays[0] || [];
    length = arrays.length;
    // 遍历第一个数组的所有元素，判断它是否也出现在剩余其他数组中，如果是则放入result中
    firstArray.forEach(function (el) {
        // 如果el已经在result中出现，则不能再放入result
        if (isElementExistInArray(result, el, comparator)) {
            return;
        }
        // 判断el是否在其他数组出现
        for (var i = 1; i < length; i++) {
            // 如果没有出现，则不放入result
            if (!isElementExistInArray(arrays[i], el, comparator)) {
                return;
            }
        }
        result.push(el);
    });
    return result;
}
exports.default = intersectionWith;
