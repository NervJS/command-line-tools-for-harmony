"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var validCheck_1 = require("./common/validCheck");
/**
 * 创建唯一值的数组，这个数组包含所有给定数组都包含的元素
 * （注：可以理解求给定数组的交集）
 * @param array
 */
function intersection() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i] = arguments[_i];
    }
    // 需要支持arguments类型的输入，故首相将其转为普通数组
    var realArrays = arrays.map(function (array) {
        if (Array.isArray(array)) {
            return array;
        }
        else if ((0, validCheck_1.isArguments)(array)) {
            return __spreadArray([], __read(array), false);
        }
        else {
            return [];
        }
    });
    var result = realArrays.reduce(function (a, b) {
        if (a && a.filter) {
            return a.filter(function (c) {
                if (b && b.includes) {
                    return b.includes(c);
                }
                return false;
            });
        }
        return [];
    });
    return Array.from(new Set(result));
}
exports.default = intersection;
