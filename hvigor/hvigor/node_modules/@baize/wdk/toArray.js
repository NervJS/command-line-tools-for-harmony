"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var values_1 = __importDefault(require("./values"));
var utils_1 = require("./common/utils");
/**
 * 将value转换为数组array并返回，如果value是对象或者数组，array是value的所有键值对中的值组成的数组
 * 如果value是Map，array是键值对组成的数组
 * @param value
 * @return value的所有键值对或者键值对中的值组成的数组
 */
function toArray(value) {
    if (value === undefined || value === null) {
        return [];
    }
    if ((0, utils_1.tagName)(value) === '[object Map]') {
        // 如果输入的value是Map，返回的数组的元素应该是[key,value]的形式，其中key和value是来自Map中的键值对
        return __spreadArray([], __read(value.keys()), false).map(function (k) { return [k, value.get(k)]; });
    }
    if (value[Symbol.iterator] === Array.prototype[Symbol.iterator]) {
        // 如果value实现了Array的iterator，则应该把它当成数组处理。
        return (0, values_1.default)(__spreadArray([], __read(value), false));
    }
    return (0, values_1.default)(value);
}
exports.default = toArray;
