"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = __importDefault(require("./isEmpty"));
var isFunction_1 = __importDefault(require("./isFunction"));
var property_1 = __importDefault(require("./property"));
/**
 * 和 sum 方法类似，iteratee 参数会作用于数组中的每一个元素
 *
 * @param {Array<any>} array 要相加的数组
 * @param {any} iteratee 迭代器
 * @returns {number} 相加的和
 *
 * @example
 *
 * const objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }]
 *
 * sumBy(objects, ({ n }) => n)
 * // => 20
 */
function sumBy(array, iteratee) {
    var e_1, _a;
    if ((0, isEmpty_1.default)(array)) {
        return 0;
    }
    var result = 0;
    var iterator = (0, isFunction_1.default)(iteratee) ? iteratee : (0, property_1.default)(iteratee);
    try {
        for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
            var value = array_1_1.value;
            var current = iterator(value);
            if (current !== undefined) {
                result += current;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.default = sumBy;
