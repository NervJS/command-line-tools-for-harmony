"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.FileUtil=void 0;const hvigor_1=require("@ohos/hvigor"),task_util_1=require("@ohos/hvigor/src/base/util/task-util"),crypto_1=require("crypto"),fs_1=__importDefault(require("fs")),promises_1=__importDefault(require("fs/promises")),fs_extra_1=__importDefault(require("fs-extra")),glob_1=require("glob"),node_fs_1=require("node:fs"),os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),promises_2=require("stream/promises"),common_const_js_1=require("../const/common-const.js"),error_code_map_js_1=require("../error/error-code-map.js"),oh_package_loader_js_1=require("./loader/file/oh-package-loader.js"),ohos_logger_js_1=require("./log/ohos-logger.js"),json_util_js_1=require("./json-util.js"),dependenct_param_validate_js_1=require("../validate/dependenct-param-validate.js");class FileUtil{static async linkFile(e,t,a=!1){const r=await promises_1.default.lstat(e);if(r.isDirectory())return;const s=a&&r.isSymbolicLink()?await promises_1.default.readlink(e):e;if(fs_1.default.existsSync(s)){await fs_extra_1.default.ensureDir(path_1.default.dirname(t));try{await promises_1.default.access(s,fs_1.default.constants.R_OK),await promises_1.default.link(e,t),this._log.debug(`Link ${s} to ${t} successfully.`)}catch(e){this._log.debug(`Hard link from ${s} to ${t} failed. Do copy instead.`),await promises_1.default.copyFile(s,t)}}}static isDirectory(...e){return fs_extra_1.default.statSync(path_1.default.resolve(...e)).isDirectory()}static checkDirWithoutDelete(...e){const t=path_1.default.resolve(...e);fs_extra_1.default.existsSync(t)||fs_extra_1.default.mkdirSync(t,{recursive:!0})}static checkFile(...e){const t=path_1.default.resolve(...e);fs_extra_1.default.existsSync(t)||FileUtil.makeFile(t),fs_extra_1.default.removeSync(t),FileUtil.makeFile(t)}static makeFile(e,t=""){fs_extra_1.default.writeFileSync(e,t)}static deleteFile(e){try{fs_extra_1.default.existsSync(e)&&fs_extra_1.default.removeSync(e)}catch(t){this._log._buildError("Delete file failed, please check and delete file.")._file(e)._errorCode(error_code_map_js_1.ECM.DECE.COMMON_UTILS)._printErrorAndExit()}}static readFile(e){try{if(!fs_extra_1.default.existsSync(e))return;return fs_extra_1.default.readFileSync(e,{encoding:"utf-8"})}catch(t){return void this._log.error(`Please check file at ${e}.`)}}static checkPathLength(e){const t=(0,hvigor_1.maxPathLength)(),a=`\t\t1. Make your project root path shorter.${os_1.default.EOL}`,r=`\t\t2. Simplify your project name.${os_1.default.EOL}`,s=`\t\t3. Simplify your module name.${os_1.default.EOL}`,i=`\t\t4. Configure a shorter target name.${os_1.default.EOL}`;e.length>t&&this._log._buildError(`The length of path exceeds the maximum length: ${t}.`)._solution(`Please try the following solutions:${os_1.default.EOL}${a}${r}${s}${i}`)._file(`'${e}'`)._errorCode(error_code_map_js_1.ECM.DECE.COMMON_UTILS)._printErrorAndExit()}static async hashEntry(e,t,a="**/*"){const r=new Map;let s=glob_1.glob.sync(a,{nodir:!0,absolute:!0,cwd:e,follow:!1});for(let e of s){const a=await this.pipelineAsync(t,e);r.set(e,a)}return r}static async pipelineAsync(e,t){var a;return(null===(a=null===hvigor_1.hvigorCore||void 0===hvigor_1.hvigorCore?void 0:hvigor_1.hvigorCore.getParameter())||void 0===a?void 0:a.getProperty(common_const_js_1.CommonConst.OHOS_PROCESSLIB_OPTIMIZATION))?(this._log.debug(`Check size & timestamp for ${t}`),this.hashStats(t)):(this._log.debug(`Check content hash for ${t}`),await this.hashContent(t))}static async hashContent(e){if(!fs_extra_1.default.existsSync(e))throw new Error('File "'+e+'" does not exist');const t=(0,crypto_1.createHash)("md5");return await(0,promises_2.pipeline)((0,node_fs_1.createReadStream)(e),t),t.digest("hex")}static hashStats(e){if(!fs_extra_1.default.existsSync(e))throw new Error('File "'+e+'" does not exist');const t=(0,crypto_1.createHash)("md5"),a=fs_1.default.statSync(e);return t.update(a.size.toString()+a.mtimeMs),t.digest("hex")}static convertToAbsolutePath(e,t){return path_1.default.isAbsolute(e)?e:path_1.default.resolve(t,e)}static convertToAbsolutePaths(e,t){return e.map((e=>FileUtil.convertToAbsolutePath(e,t)))}static isSubDir(e,t){const a=path_1.default.relative(e,t);return a&&!a.startsWith("..")&&!path_1.default.isAbsolute(a)}static fileExists(e){return fs_1.default.existsSync(e)&&fs_1.default.realpathSync.native(e)===e}static matchingFile(e,t=!1){return!!glob_1.glob.sync(e,{nocase:t}).length}static copySpecialFileToTempDir(e,t){fs_extra_1.default.readdirSync(e).forEach((a=>{if(this.checkSpecialFile(a)){const r=path_1.default.resolve(e,a);fs_extra_1.default.statSync(r).isFile()&&fs_extra_1.default.copySync(r,path_1.default.resolve(t,a))}}))}static async readDirFileNames(e){let t=new Set;return await async function e(a){try{const r=await fs_extra_1.default.readdir(a,{withFileTypes:!0});for(let s of r){const r=path_1.default.join(a,s.name);s.isDirectory()?await e(r):t.add(s.name)}}catch(e){}}(e),t}static addParamToOhPack(e,t,a,r,s,i){const o=e?common_const_js_1.CommonConst.OH_PACKAGE_JSON5:common_const_js_1.CommonConst.PACKAGE_JSON,l=oh_package_loader_js_1.ohPackageLoader.getNodeOhPackagePath(path_1.default.resolve(t,o));let n=(0,json_util_js_1.getJson5Obj)(l);n.metadata?Object.assign(n.metadata,a):Object.assign(n,{metadata:a}),n=FileUtil.mergeExtraParamsToOhPack(n,r,s,i),fs_extra_1.default.writeJSONSync(l,n)}static mergeExtraParamsToOhPack(e,t,a,r){return e={...e,...t,nativeComponents:(e.nativeComponents||[]).concat(t.nativeComponents||[])},t.nativeComponents||delete e.nativeComponents,e.nativeComponents&&(e.nativeComponents=e.nativeComponents.filter((e=>r.has(e.name)))),a===(0,task_util_1.getAlignTarget)()&&(e.version+=`+${(0,task_util_1.getAlignTarget)()}`),e}static checkSpecialFile(e){const t=e.toLowerCase(),a=t.split(".")[0];return-1!==["readme.opensource"].indexOf(t)||-1!==["license"].indexOf(a)||/^(changelog|readme)([-_](cn|en))?\.md$/i.test(t)}static uniqueFileName(e,t){const a=new Map;if(e.forEach((e=>{a.set(e,1)})),a.has(t)){let e=a.get(t);for(;a.has(this.addSuffix(t,e));)e++;a.set(t,e+1);const r=this.addSuffix(t,e);return a.set(r,1),r}return a.set(t,1),t}static addSuffix(e,t){return`${e}${t}`}static traverseFileFolder(e){const t=[];if(!fs_extra_1.default.statSync(e).isDirectory()||!fs_extra_1.default.existsSync(e))return[];return fs_extra_1.default.readdirSync(e).forEach((a=>{const r=path_1.default.join(e,a),s=fs_extra_1.default.statSync(r);s.isDirectory()?this.traverseFileFolder(r):s.isFile()&&t.push(a.split(".")[0])})),t}static getAllFilesFromFolder(e){const t=[];if(!fs_extra_1.default.existsSync(e)||!fs_extra_1.default.statSync(e).isDirectory())return[];return fs_extra_1.default.readdirSync(e).forEach((a=>{const r=path_1.default.join(e,a),s=fs_extra_1.default.statSync(r);s.isDirectory()?t.push(...this.getAllFilesFromFolder(r)):s.isFile()&&t.push(r)})),t}static getFileSuffix(e){const t=path_1.default.parse(e).base;return""===t||-1===t.indexOf(".")?t:t.substring(t.lastIndexOf(".")+1)}static normalizePathSeparator(e){return e.replace(/\\\\/g,"/").replace(/\\/g,"/").replace(/\/:/g,":")}static resolveJsonObjWithoutParam(e,t,a,r,s){const i=[];for(const o in e)if(!r||r.includes(o))if("object"==typeof e[o]&&null!==e[o]){const r=this.resolveJsonObjWithoutParam(e[o],t,a,void 0,s);i.push(...r)}else if("string"==typeof e[o]){const r=FileUtil.extractValue(e[o],t,a,s,o);e[o]=r.value,r.localDepArr&&i.push(...r.localDepArr)}return this._log.debug(`jsonObjWithoutParam ${JSON.stringify(e)} at ${a.parameterFilePath}`),i}static extractValue(e,t,a,r,s){const i=e.match(common_const_js_1.ParameterizationConst.REGEX);if(!i)return{value:e};t||this._log._buildError(`${e} corresponding to the parameterFile is not find, Check the parameterFile is valid.`)._printErrorAndExit();const o=i[1].split(".");return(0,dependenct_param_validate_js_1.matchValueWithParameterizationKey)({keys:o,parameterFileJson:t,pathParamsObj:a,dependencyName:s,ohPackageInfoGetter:r})}static extracted(e,t,a,r){return FileUtil.extractValue(e,t,a,void 0,r).value}static copyDir(e,t){const a=fs_extra_1.default.readdirSync(e,{withFileTypes:!0});fs_extra_1.default.mkdirsSync(t);for(const r of a){const a=path_1.default.join(e,r.name),s=path_1.default.join(t,r.name);r.isDirectory()?this.copyDir(a,s):fs_extra_1.default.copyFileSync(a,s)}}}exports.FileUtil=FileUtil,FileUtil._log=ohos_logger_js_1.OhosLogger.getLogger("File");