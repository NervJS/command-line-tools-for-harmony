"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = Symbol('placeholder'); // 占位符
curry.placeholder = _;
/**
 * 对指定函数进行柯理化
 * @param fn，要柯理化的函数
 * @param _enoughArgsNum，在调用fn之前至少需要收集到的入参的个数
 * @return curriedFn，fn进行柯理化后的函数
 */
function curry(func, _enoughArgsNum) {
    if (_enoughArgsNum === void 0) { _enoughArgsNum = func.length; }
    var arity = parseInt(_enoughArgsNum, 10);
    arity = Number.isNaN(arity) ? 0 : Math.floor(arity);
    var placeholder = curry.placeholder;
    function warpper() {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        var partialArgs = __spreadArray([], __read(rest), false);
        var placeIndexes = getIndexList(partialArgs, placeholder);
        var length = partialArgs.length - placeIndexes.length;
        if (this) {
            Object.setPrototypeOf(this, func.prototype);
        }
        if (length < arity) {
            return restCurry(func, arity - length, partialArgs, placeIndexes, placeholder);
        }
        return func.apply(this, partialArgs);
    }
    warpper.placeholder = placeholder;
    return warpper;
}
function getIndexList(args, placeholder) {
    var indexes = [];
    args.forEach(function (ele, index) {
        if (ele === placeholder) {
            indexes.push(index);
        }
    });
    return indexes;
}
function composeArgs(partialArgs, placeArr, excuteArgs) {
    var partialIndex = -1;
    var argIndex = -1;
    var rangeLength = Math.max(excuteArgs.length - placeArr.length, 0);
    var result = new Array(partialArgs.length + rangeLength);
    while (++partialIndex < partialArgs.length) {
        result[partialIndex] = partialArgs[partialIndex];
    }
    while (++argIndex < placeArr.length && argIndex < excuteArgs.length) {
        var placeholderIndex = placeArr[argIndex];
        result[placeholderIndex] = excuteArgs[argIndex];
    }
    while (rangeLength--) {
        result[partialIndex++] = excuteArgs[argIndex++];
    }
    return result;
}
function restCurry(func, arity, partialArgs, placeArr, placeholder) {
    function warpper() {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        var excuteArgs = __spreadArray([], __read(rest), false);
        var executeHoldersLen = getIndexList(excuteArgs, placeholder).length;
        var args = composeArgs(partialArgs, placeArr, excuteArgs);
        var newPlaceIndexes = getIndexList(args, placeholder);
        var length = excuteArgs.length - executeHoldersLen;
        if (length < arity) {
            return restCurry(func, arity - length, args, newPlaceIndexes, placeholder);
        }
        return func.apply(this, args);
    }
    warpper.placeholder = placeholder;
    return warpper;
}
exports.default = curry;
