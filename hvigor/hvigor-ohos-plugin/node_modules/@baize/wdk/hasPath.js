"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var validCheck_1 = require("./common/validCheck");
var isKey_1 = require("./common/isKey");
var isArray_1 = __importDefault(require("./isArray"));
var isSymbol_1 = __importDefault(require("./isSymbol"));
var memoize_1 = require("./memoize");
// null、undefined、Symbol 没有toString方法
function toString(value) {
    return (0, isSymbol_1.default)(value) ? value : "".concat(value);
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
/**
 * 将字符串转成路径数组。支持a.b.c及a.b[c]形式
 *
 * @private
 * @param {string} path 要转换的路径
 */
var stringToPath = (0, memoize_1.memoizeCapped)(function (string) {
    var result = [];
    if (string[0] === '.') {
        result.push('');
    }
    string.replace(rePropName, function (match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        return match;
    });
    return result;
});
function castPath(value, object) {
    if ((0, isArray_1.default)(value)) {
        return value;
    }
    return (0, isKey_1.isKey)(value, object) ? [value] : stringToPath(toString(value));
}
function isIndexOfArray(object, key) {
    if (!(0, isArray_1.default)(object) && !(0, validCheck_1.isArguments)(object)) {
        return false;
    }
    var index = Number(key);
    return index > -1 && index < object.length;
}
/**
 * 检查 path 是否是object对象的直接属性，根据多段路径查询嵌套对象
 *
 * @private
 * @param {Object} object 要查询的对象
 * @param {Array|string} path 要查询的路径。多段路径由英文句号.隔开
 * @param {Function} hasFunc 是否属于当前遍历层级的对象的判断方法
 * @returns {boolean} 该路径能在该对象查找到，则为true，否则为false
 */
function hasPath(object, path, hasFunc) {
    var paths = castPath(path, object);
    var currentObj = object;
    for (var index = 0, length_1 = paths.length; index < length_1; index++) {
        var key = toString(paths[index]);
        if (!hasFunc(currentObj, key) && !isIndexOfArray(currentObj, key)) {
            return false;
        }
        currentObj = currentObj[key];
    }
    return true;
}
exports.default = hasPath;
