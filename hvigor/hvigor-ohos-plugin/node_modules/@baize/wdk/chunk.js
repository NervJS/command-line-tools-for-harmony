"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseSlice_1 = __importDefault(require("./common/baseSlice"));
/**
 * 将数组array按size的长度截取、分片成一个个子数组，并返回。
 * @param array，要划分的数组
 * @param size，划分出来的每个子数组的长度
 * @return 返回划分出来的每个子数组组成的二维数组
 * @example
 *   chunk( [1,2,3] , 2)   // 结果为 [[1,2],[3]]
 */
function chunk(array, size) {
    if (size === void 0) { size = 1; }
    var arrLength = array == null ? 0 : array.length;
    var floor = Math.floor, ceil = Math.ceil;
    // 对size强转并向下取整
    var intSize = floor(Number(size));
    if (!intSize || intSize < 0) {
        return [];
    }
    var resultLength = ceil(arrLength / intSize);
    var result = Array(resultLength);
    for (var i = 0; i < resultLength; i++) {
        result[i] = (0, baseSlice_1.default)(array, i * intSize, (i + 1) * intSize);
    }
    return result;
}
exports.default = chunk;
