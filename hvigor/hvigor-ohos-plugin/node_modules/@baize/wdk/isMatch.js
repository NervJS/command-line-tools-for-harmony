"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.needDeeperCompare = void 0;
var utils_1 = require("./common/utils");
var isArray = Array.isArray;
/**
 * 判断value是不是{}或者[]等比较复杂的变量
 * @param value
 * @return 返回value是否为复杂变量
 */
function isValueComplex(value) {
    return typeof value === 'object' && value !== null;
}
/**
 * 判断objValue和srcValue是否需要进一步递归调用isMatch来得知它们是否算匹配
 * @param objValue
 * @param srcValue
 * @return 返回objValue和srcValue是否需要进一步递归
 */
function needDeeperCompare(objValue, srcValue) {
    return isValueComplex(objValue) && isValueComplex(srcValue);
}
exports.needDeeperCompare = needDeeperCompare;
/**
 * 对isMatch函数的原始输入做一些转换
 * @param rawObj
 * @param rawSource
 * @return 返回转换后的对象
 */
function transformRawInputs(rawObj, rawSource) {
    var fromEntries = Object.fromEntries;
    // 对原始输入做一些转换
    var obj = rawObj;
    var tagNameOfRawObj = (0, utils_1.tagName)(rawObj);
    // 如果rawObj是数组或者Set，后面可能用到splice，故先复制一份
    if (isArray(rawObj) || tagNameOfRawObj === '[object Set]') {
        obj = __spreadArray([], __read(rawObj), false);
    }
    else if (tagNameOfRawObj === '[object Map]') {
        // map直接转为对象
        obj = fromEntries(rawObj.entries());
    }
    var source = rawSource;
    var tagNameOfRawSource = (0, utils_1.tagName)(rawSource);
    if (tagNameOfRawSource === '[object Set]') {
        source = __spreadArray([], __read(rawSource), false);
    }
    else if (tagNameOfRawSource === '[object Map]') {
        source = fromEntries(rawSource.entries());
    }
    return { obj: obj, source: source };
}
/**
 * 递归的判断rawObj和rawSource是否匹配。rawObj可以包含多余rawSource的属性
 * @param rawObj，要比较的对象
 * @param rawSource，要比较的参考对象，rawObj至少需要包含rawSource中的所有属性，才算匹配
 * @return 一个boolean，表示两者是否匹配
 */
function isMatch(rawObj, rawSource) {
    var _a = transformRawInputs(rawObj, rawSource), obj = _a.obj, source = _a.source;
    // 包含obj原型链上的所有key
    var objKeys = obj == null ? [] : (0, utils_1.getObjectKeysWithProtoChain)(obj);
    // 不能包含source原型链上的key
    var sourceKeys = source == null ? [] : Object.keys(source);
    // 如果obj和source两者都是数组，只需要srcValue在obj中被任一元素match到即可
    if (isArray(obj) && isArray(source)) {
        var _loop_1 = function (i, length_1) {
            var sourceKey = sourceKeys[i];
            var srcValue = source[sourceKey];
            var foundIndex = obj.findIndex(function (v) { return (isValueComplex(srcValue) ? isMatch(v, srcValue) : v === srcValue); });
            // 如果obj中有元素match到srcValue，则将其从obj中去除，因为每个obj元素只能match一次
            if (foundIndex !== -1) {
                obj.splice(foundIndex, 1);
                return "continue";
            }
            else {
                return { value: false };
            }
        };
        for (var i = 0, length_1 = sourceKeys.length; i < length_1; i++) {
            var state_1 = _loop_1(i, length_1);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return true;
    }
    var isNaN = Number.isNaN;
    for (var i = 0, length_2 = sourceKeys.length; i < length_2; i++) {
        var sourceKey = sourceKeys[i];
        // 判断obj中有没有相同的key，如果没有，则return false
        if (!objKeys.includes(sourceKey)) {
            return false;
        }
        /*
         * 判断srcValue和objValue是否match，如果它们都是简单值（字符串、布尔等），直接用===比较
         * 但如果它们是对象或者数组，不能简单比较，需要进一步递归调用isMatch来比较
         */
        var objValue = obj[sourceKey];
        var srcValue = source[sourceKey];
        if (needDeeperCompare(objValue, srcValue)) {
            if (!isMatch(objValue, srcValue)) {
                return false;
            }
        }
        else if (isNaN(srcValue) && isNaN(obj)) {
            continue;
        }
        else if (objValue !== srcValue) {
            return false;
        }
    }
    return true;
}
exports.default = isMatch;
