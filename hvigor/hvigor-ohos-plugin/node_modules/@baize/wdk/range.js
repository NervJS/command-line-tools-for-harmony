"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isNaN_1 = __importDefault(require("./isNaN"));
/**
 * 如果start是负数，而end或step没有指定，那么step从-1为开始。
 * 如果end没有指定，start设置为 0。
 * 如果end小于start，会创建一个空数组，除非指定了step。
 * 注意: JavaScript 遵循 IEEE-754 标准处理无法预料的浮点数结果。
 * @param rest
 */
function parseParams(rest) {
    var start = 0;
    var end = (0, isNaN_1.default)(Number(rest[0])) ? 0 : Number(rest[0]);
    var step = end < 0 ? -1 : 1;
    if (rest.length === 1) {
        return { start: start, end: end, step: step };
    }
    start = (0, isNaN_1.default)(Number(rest[0])) ? 0 : Number(rest[0]);
    end = (0, isNaN_1.default)(Number(rest[1])) ? 0 : Number(rest[1]);
    if (rest.length === 2) {
        step = end > start ? 1 : -1;
    }
    else {
        step = (0, isNaN_1.default)(Number(rest[2])) ? 0 : Number(rest[2]);
    }
    return { start: start, end: end, step: step };
}
/**
 * 创建一个包含从start到end，但不包含end本身范围数字的数组。
 * @param end
 * @param start
 * @param step
 */
function range() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var _a = parseParams(rest), start = _a.start, end = _a.end, step = _a.step;
    var flag = end < start && step > 0;
    var length = Math.abs(Math.ceil((end - start) / (step || 1)));
    var result = new Array(length);
    var newStart = start;
    for (var i = 0; i < length; i++) {
        result[i] = newStart;
        newStart = flag ? newStart - step : newStart + step;
    }
    return result;
}
exports.default = range;
