"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./common/utils");
var matchesProperty_1 = __importDefault(require("./matchesProperty"));
var property_1 = __importDefault(require("./property"));
var keys_1 = __importDefault(require("./keys"));
var matches_1 = __importDefault(require("./matches"));
/**
 * 遍历obj的所有键值对，找到经predicate断言为真的键并将其返回
 * @param obj，要遍历的对象或者数组
 * @param predicate，用于断言obj中键值对是否应该返回真值，一旦返回真值，遍历立即结束
 * @return 返回经predicate断言为真的键
 */
function findKey(obj, predicate) {
    if (obj === undefined || obj === null) {
        return undefined;
    }
    // 得到要遍历的所有key
    var objKeys = (0, keys_1.default)(obj);
    // isFound是函数，用于得到每次遍历key时执行predicate的断言的结果
    var isFound = function () { return false; };
    var typeOfPredicate = typeof predicate;
    var tagNameOfPredicate = (0, utils_1.tagName)(predicate);
    if (typeOfPredicate === 'function') {
        isFound = predicate;
    }
    else if (Array.isArray(predicate)) {
        isFound = (0, matchesProperty_1.default)(predicate[0], predicate[1]);
    }
    else if (tagNameOfPredicate === '[object Object]') {
        isFound = (0, matches_1.default)(predicate);
    }
    else if (typeOfPredicate === 'string') {
        isFound = (0, property_1.default)(predicate);
    }
    for (var i = 0, length_1 = objKeys.length; i < length_1; i++) {
        var key = objKeys[i];
        if (Boolean(isFound(obj[key], key, obj))) {
            return key;
        }
    }
    return undefined;
}
exports.default = findKey;
