"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isArrayLike_1 = __importDefault(require("./isArrayLike"));
function getMaxLength(input) {
    var maxLength = 0;
    input.forEach(function (item) {
        if ((0, isArrayLike_1.default)(item) && typeof item !== 'string' && item.length > maxLength) {
            maxLength = item.length;
        }
    });
    return maxLength;
}
/**
 * 创建一个分组元素的数组，数组的第一个元素包含所有给定数组的第一个元素，数组的第二个元素包含所有给定数组的第二个元素，以此类推。
 *
 * @param input(...array) 要处理的数组
 * @returns array 返回分组元素的新数组
 *
 * @example
 * _.zip(['fred', 'barney'], [30, 40], [true, false]);
 * // => [['fred', 30, true], ['barney', 40, false]]
 */
function zip() {
    var input = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        input[_i] = arguments[_i];
    }
    if (!(0, isArrayLike_1.default)(input) && typeof input !== 'string') {
        return [];
    }
    var result = [];
    var maxLength = getMaxLength(input);
    var _loop_1 = function (i) {
        var tempRes = [];
        input.forEach(function (item) {
            if ((0, isArrayLike_1.default)(item) && typeof item !== 'string') {
                tempRes.push(item[i]);
            }
        });
        result.push(tempRes);
    };
    for (var i = 0; i < maxLength; i++) {
        _loop_1(i);
    }
    return result;
}
exports.default = zip;
