"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkIsNestedObject = exports.getNestedValue = exports.getObjectKeys = exports.getFilters = void 0;
var isNumber_1 = __importDefault(require("./isNumber"));
var isNil_1 = __importDefault(require("./isNil"));
var isObject_1 = __importDefault(require("./isObject"));
var pull_1 = __importDefault(require("./pull"));
var toString_1 = __importDefault(require("./toString"));
function getFilters(savedProps) {
    var result = [];
    for (var i = 0, len = savedProps.length; i < len; i++) {
        var item = savedProps[i];
        if (Array.isArray(item)) {
            result = result.concat(item);
        }
        else if (typeof item === 'string' || (0, isNumber_1.default)(item)) {
            result.push((0, toString_1.default)(item));
        }
        else if (Object.prototype.toString.call(item) === '[object Symbol]') {
            result.push(item);
        }
        else if (Object.prototype.toString.call(item) === '[object Arguments]') {
            result.push.apply(result, __spreadArray([], __read(item), false));
        }
    }
    return result;
}
exports.getFilters = getFilters;
/**
 * 获取输入对象的keys，包括以Symbol定义的属性key
 * @param input
 */
function getObjectKeys(input) {
    var keyList = Object.keys(input);
    var symbolKeyList = Object.getOwnPropertySymbols(input);
    if (symbolKeyList.length > 0) {
        return [].concat(keyList).concat(symbolKeyList);
    }
    return keyList;
}
exports.getObjectKeys = getObjectKeys;
function setPropsToResult(input, keyList, filters, result, deleteKey) {
    if (deleteKey === void 0) { deleteKey = false; }
    var filterList = [].concat(filters);
    for (var i = 0, len = keyList.length; i < len; i++) {
        var eachKey = keyList[i];
        if (filterList.includes(eachKey)) {
            result[eachKey] = input[eachKey];
            if (deleteKey) {
                (0, pull_1.default)(filterList, [eachKey]);
            }
        }
    }
    return filterList;
}
/**
 * 获取对象的嵌套属性的值
 * @param input
 * @param key
 */
function getNestedValue(input, key) {
    var newObj = {};
    var nestedKeys = Object.prototype.toString.call(key) === '[object Symbol]' ? [key] : key.split('.');
    if (nestedKeys.length > 1) {
        var topKey = nestedKeys.shift();
        if ((0, isNil_1.default)(input[topKey])) {
            return newObj;
        }
        var nestedValue = getNestedValue(input[topKey], nestedKeys.join('.'));
        newObj[topKey] = nestedValue;
        return newObj;
    }
    if (Object.prototype.hasOwnProperty.call(input, key)) {
        newObj[key] = input[key];
    }
    return newObj;
}
exports.getNestedValue = getNestedValue;
function mergeNestedObjToResult(target, other) {
    if (!(0, isObject_1.default)(target) && !(0, isObject_1.default)(other)) {
        return other;
    }
    var keyList = Object.keys(other);
    for (var i = 0, len = keyList.length; i < len; i++) {
        var key = keyList[i];
        target[key] = !target[key] ? other[key] : mergeNestedObjToResult(target[key], other[key]);
    }
    return target;
}
function setNestedPropsToResult(filters, input, result) {
    if (filters.length > 0) {
        for (var i = 0, len = filters.length; i < len; i++) {
            var newObj = getNestedValue(input, filters[i]);
            var topKey = Object.keys(newObj)[0];
            if (!Object.prototype.hasOwnProperty.call(result, topKey)) {
                Object.assign(result, newObj);
            }
            else {
                mergeNestedObjToResult(result, newObj);
            }
        }
    }
}
/**
 * 检查对象属性是否嵌套
 * @param input
 */
function checkIsNestedObject(input) {
    var objKeys = Object.keys(input);
    for (var i = 0, len = objKeys.length; i < len; i++) {
        if (Object.prototype.toString.call(input[objKeys[i]]) === '[object Object]') {
            return true;
        }
    }
    return false;
}
exports.checkIsNestedObject = checkIsNestedObject;
/**
 * 处理有嵌套属性的对象、及其原型对象
 * @param input
 * @param filterList
 */
function processNestedObject(input, filterList) {
    var result = {};
    var inputKeyList = getObjectKeys(input);
    var filters = setPropsToResult(input, inputKeyList, filterList, result, true);
    setNestedPropsToResult(filters, input, result);
    // input的原型对象
    var protoTypeOfObj = Object.getPrototypeOf(input);
    var protoKeyList = Object.keys(protoTypeOfObj);
    if (checkIsNestedObject(protoTypeOfObj)) {
        filters = setPropsToResult(protoTypeOfObj, protoKeyList, filterList, result, true);
        setNestedPropsToResult(filters, protoTypeOfObj, result);
    }
    else {
        setPropsToResult(protoTypeOfObj, protoKeyList, filterList, result);
    }
    return result;
}
/**
 * 处理普通对象、及其原型对象
 * @param input
 * @param filterList
 */
function processCommonObject(input, filterList) {
    var result = {};
    var inputKeyList = getObjectKeys(input);
    setPropsToResult(input, inputKeyList, filterList, result);
    // input的原型对象
    var protoTypeOfObj = Object.getPrototypeOf(input);
    var protoKeyList = Object.keys(protoTypeOfObj);
    var filters = setPropsToResult(protoTypeOfObj, protoKeyList, filterList, result, true);
    setNestedPropsToResult(filters, protoTypeOfObj, result);
    return result;
}
/**
 * 创建一个从 object 中选中的属性的对象，返回被保留属性后的新对象
 * @param input 来源对象
 * @param savedProps 保留的属性
 */
function pick(input) {
    var savedProps = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        savedProps[_i - 1] = arguments[_i];
    }
    if ((0, isNil_1.default)(input)) {
        return {};
    }
    var filterList = getFilters(savedProps);
    if (!checkIsNestedObject(input)) {
        return processCommonObject(input, filterList);
    }
    return processNestedObject(input, filterList);
}
exports.default = pick;
