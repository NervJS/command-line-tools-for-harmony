"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unzip = void 0;
const zip_js_1 = require("@zip.js/zip.js");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const sdk_exception_1 = require("../api/sdk-exception");
const error_tip_1 = require("../api/error-tip");
/**
 * 解压后的Zip文件最大数量，含目录、文件、符号链接等
 */
const MAX_ZIP_ENTRY_NUM = 100000;
/**
 * 解压后的zip文件总大小的最大size，20G
 */
const MAX_ZIP_SIZE = 20 * 1024 * 1024 * 1024;
const unzip = (sourcePath, dest) => __awaiter(void 0, void 0, void 0, function* () {
    if (!fs_1.default.existsSync(sourcePath)) {
        throw new sdk_exception_1.SdkException('unzip failed', new error_tip_1.ErrorTip('', `Unable to find file ${sourcePath}`, ''));
    }
    const buffer = fs_1.default.readFileSync(sourcePath);
    if (buffer.length > MAX_ZIP_SIZE) {
        throw new sdk_exception_1.SdkException('unzip failed', new error_tip_1.ErrorTip('', `Zip size is too big, exceed ${MAX_ZIP_SIZE} bytes`, ''));
    }
    const zipReader = new zip_js_1.ZipReader(new zip_js_1.Uint8ArrayReader(new Uint8Array(buffer)));
    const entries = yield zipReader.getEntries();
    return saveZipFiles(dest, entries);
});
exports.unzip = unzip;
const saveZipFiles = (savePath, entries) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (entries.length > MAX_ZIP_ENTRY_NUM) {
        throw new sdk_exception_1.SdkException('unzip failed', new error_tip_1.ErrorTip('', `Zip entry is too many, exceed max ${MAX_ZIP_ENTRY_NUM}`, ''));
    }
    try {
        for (const entry of entries) {
            const entryPath = path_1.default.join(savePath, entry.filename);
            if (entry.directory) {
                fs_1.default.mkdirSync(entryPath, { recursive: true });
                const unixPermissions = (entry.externalFileAttribute >> 16) & 0xFFFF;
                // 设置文件权限
                fs_1.default.chmodSync(entryPath, unixPermissions);
            }
            else {
                const parentDir = path_1.default.dirname(entryPath);
                fs_1.default.mkdirSync(parentDir, { recursive: true });
                const externalFileAttribute = entry.externalFileAttribute;
                const data = yield ((_a = entry.getData) === null || _a === void 0 ? void 0 : _a.call(entry, new zip_js_1.BlobWriter()));
                if (!data) {
                    continue;
                }
                if (((externalFileAttribute >> 16) & 0xFFFF) === 0xA1ED) { // 是符号链接
                    const buffer = Buffer.from(yield data.arrayBuffer());
                    const symlinkTarget = buffer.toString('utf-8');
                    fs_1.default.symlinkSync(symlinkTarget, entryPath, 'file');
                }
                else {
                    const buffer = Buffer.from(yield data.arrayBuffer());
                    fs_1.default.writeFileSync(entryPath, buffer);
                    // 设置文件权限
                    const unixPermissions = (externalFileAttribute >> 16) & 0xFFFF;
                    fs_1.default.chmodSync(entryPath, unixPermissions);
                }
            }
        }
    }
    catch (error) {
        throw new sdk_exception_1.SdkException('unzip failed', new error_tip_1.ErrorTip('', error === null || error === void 0 ? void 0 : error.message, ''));
    }
});
