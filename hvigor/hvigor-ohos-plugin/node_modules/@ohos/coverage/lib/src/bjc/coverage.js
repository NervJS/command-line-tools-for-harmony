"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoverageReport = exports.Function = exports.Branch = exports.Region = exports.Location = exports.Summary = exports.Coverage = exports.IgnoreType = void 0;
var IgnoreType;
(function (IgnoreType) {
    IgnoreType[IgnoreType["None"] = 0] = "None";
    IgnoreType[IgnoreType["File"] = 1] = "File";
    IgnoreType[IgnoreType["Next"] = 2] = "Next";
    IgnoreType[IgnoreType["If"] = 3] = "If";
    IgnoreType[IgnoreType["Else"] = 4] = "Else";
})(IgnoreType = exports.IgnoreType || (exports.IgnoreType = {}));
const VALID_BIT = 4;
function toIgnoreType(type) {
    if (type === undefined) {
        return IgnoreType.None;
    }
    return type;
}
class Coverage {
    constructor(total, covered) {
        this.total = total;
        this.covered = covered;
        this.pct = 0;
        this.updatePct();
    }
    updatePct() {
        this.pct = Number((this.total > 0 ? (this.covered * 100) / this.total : 0).toPrecision(3));
    }
}
exports.Coverage = Coverage;
class Summary {
    constructor() {
        this.lines = new Coverage(0, 0);
        this.functions = new Coverage(0, 0);
        this.branches = new Coverage(0, 0);
    }
    update() {
        this.lines.updatePct();
        this.functions.updatePct();
        this.branches.updatePct();
    }
    add(summary) {
        this.lines.total += summary.lines.total;
        this.lines.covered += summary.lines.covered;
        this.lines.pct =
            Number((this.lines.total > 0 ? (this.lines.covered * 100) / this.lines.total : 0).toPrecision(VALID_BIT));
        this.functions.total += summary.functions.total;
        this.functions.covered += summary.functions.covered;
        this.functions.pct =
            Number((this.functions.total > 0 ? (this.functions.covered * 100) / this.functions.total : 0).toPrecision(VALID_BIT));
        this.branches.total += summary.branches.total;
        this.branches.covered += summary.branches.covered;
        this.branches.pct =
            Number((this.branches.total > 0 ? (this.branches.covered * 100) / this.branches.total : 0).toPrecision(VALID_BIT));
    }
}
exports.Summary = Summary;
class Location {
    constructor(line, col) {
        this.line = line;
        this.col = col;
    }
}
exports.Location = Location;
class Region {
    constructor(startLoc, endLoc, ignored) {
        this.startLoc = startLoc;
        this.endLoc = endLoc;
        this.count = 0;
        this.ignored = toIgnoreType(ignored);
    }
}
exports.Region = Region;
class Branch {
    constructor(startLoc, endLoc, ignored) {
        this.startLoc = startLoc;
        this.endLoc = endLoc;
        this.trueCount = 0;
        this.falseCount = 0;
        this.group = [];
        this.ignored = toIgnoreType(ignored);
    }
}
exports.Branch = Branch;
class Function {
    constructor(name, ignored) {
        this.name = name;
        this.count = 0;
        this.regions = [];
        this.branches = [];
        this.ignored = toIgnoreType(ignored);
    }
}
exports.Function = Function;
class CoverageReport {
    constructor() {
        this.summary = new Summary();
        this.files = [];
    }
}
exports.CoverageReport = CoverageReport;
