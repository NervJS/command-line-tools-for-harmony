import * as ts from 'typescript';
import { BjcCls } from './helper';
export declare enum CoverageMode {
    BLACK = "black",
    WHITE = "white",
    FULL = "full"
}
export interface Config {
    coverageMode: CoverageMode;
    projectTopDir: string;
    onProcessExit?: boolean;
    modulePath: string;
    testMode?: string;
}
export declare abstract class BaseInstrumenter {
    context: ts.TransformationContext;
    sourceFile: ts.SourceFile;
    relativePath: string;
    projectConfig: Config;
    anonymousCnt: number;
    hasInstrument: boolean;
    tsc: any;
    constructor(context: ts.TransformationContext, sourceFile: ts.SourceFile, projectConfig: Config);
    abstract visitFunctionNode(node: ts.FunctionLikeDeclaration): ts.FunctionLikeDeclaration;
    abstract visitClassDeclarationNode(node: ts.ClassDeclaration): ts.ClassDeclaration;
    abstract onDone(sourceFile: ts.SourceFile, importClause: string[]): ts.SourceFile;
    protected buildMethodSignature(node: ts.FunctionLikeDeclaration): string;
    protected buildMethodName(node: any): string;
    protected buildBjcClass(node: any): BjcCls;
    protected getSourceFileName(): string;
}
