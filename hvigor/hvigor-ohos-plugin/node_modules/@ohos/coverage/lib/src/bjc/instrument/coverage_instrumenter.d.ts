import * as ts from 'typescript';
import { File } from '../coverage';
import { BaseInstrumenter, Config } from './base_instrumenter';
export declare class CoverageInstrumenter extends BaseInstrumenter {
    private coverageData;
    private objName;
    private hash;
    private project;
    private hasInstrumentCollector;
    constructor(context: ts.TransformationContext, sourceFile: ts.SourceFile, projectConfig: Config);
    markTargetNodesIgnored(node: any): void;
    setExeLine(exeLine: number[]): void;
    onDone(sourceFile: ts.SourceFile): ts.SourceFile;
    visitClassDeclarationNode(node: any): ts.ClassDeclaration;
    /**
     * get coverage data
     * @returns coverageData
     */
    getCoverageData(): File;
    /**
     * Parse the function name and control flow to implement instrumentation
     * @param funcNode
     */
    visitFunctionNode(funcNode: any): ts.FunctionLikeDeclaration;
    private isInstrumentRegionStmt;
    private isInstrumentFunctionStmt;
    private isInstrumentStmt;
    private isControlStmt;
    private instrumentBlock;
    private instrumentIf;
    private transformThenStatement;
    private instrumentSwitch;
    private instrumentLoop;
    private instrumentTryStatement;
    private instrumentConditionalExpression;
    /**
     * instrument coverage data to each ts file header
     * @param node ts.SourceFile
     */
    private instrumentCoverageData;
    private formatInitCovData;
    private parseFunction;
    private instrumentFunctionEntry;
    /**
     * ETS compilation will insert a new node, and there is no corresponding source code location
     * @param node
     * @param fuzz Whether to fuzz the location of the child node
     * @returns
     */
    private getSourceRegion;
    /**
     * Instrument Ability cov collector
     * @param node
     */
    private instrumentAbilityCovCollector;
}
