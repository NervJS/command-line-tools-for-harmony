export declare enum IgnoreType {
    None = 0,
    File = 1,
    Next = 2,
    If = 3,
    Else = 4
}
export declare class Coverage {
    total: number;
    covered: number;
    pct: number;
    executedLineCount?: number[];
    constructor(total: number, covered: number);
    updatePct(): void;
}
export declare class Summary {
    lines: Coverage;
    functions: Coverage;
    branches: Coverage;
    constructor();
    update(): void;
    add(summary: Summary): void;
}
export declare class Location {
    line: number;
    col: number;
    constructor(line: number, col: number);
}
export declare class Region {
    count: number;
    startLoc: Location;
    endLoc: Location;
    ignored: IgnoreType;
    constructor(startLoc: Location, endLoc: Location, ignored: IgnoreType);
}
export declare class Branch {
    trueCount: number;
    falseCount: number;
    startLoc: Location;
    endLoc: Location;
    group: Array<number>;
    ignored: IgnoreType;
    constructor(startLoc: Location, endLoc: Location, ignored: IgnoreType);
}
export declare class Function {
    name: string;
    count: number;
    regions: Array<Region>;
    branches: Array<Branch>;
    ignored: IgnoreType;
    constructor(name: string, ignored: IgnoreType);
}
export interface File {
    version: string;
    versionCode: number;
    path: string;
    link?: string;
    hash: string;
    lineCnt: number;
    count: number;
    functions: Array<Function>;
    summary?: Summary;
    exeLine: number[];
}
export declare class CoverageReport {
    files: Array<File>;
    summary: Summary;
    constructor();
}
