import * as ts from 'typescript';
import { IgnoreType } from '../coverage';
export interface BjcCls {
    name: string;
    extends: string[];
    implements: string[];
}
export declare class Helper {
    /**
     * Build val define statement
     * @example
     * buildVariableStat(ts.NodeFlags.Const, 'gcv', ts.factory.createStringLiteral('__BJC_COV__');
     * gencode: const gcv = '__BJC_COV__';
     * @param flags
     * @param name
     * @param initializer
     * @returns
     */
    static buildVariableStatement(flags: ts.NodeFlags, name: string, initializer?: ts.Expression): ts.VariableStatement;
    /**
     * Build object literal expr
     * eg:  {version: "bjc v1.0.0", path: "test.ts", hash: "45120b480233412eb76719261370cbc5ffdeae3bbfe5d94fb5bea452fa18fb21"}
     * @param obj
     * @returns
     */
    static buildObjectLiteralExpression(obj: object): ts.ObjectLiteralExpression;
    /**
     * code to statements ast
     * @param code
     * @returns
     */
    static buildAst(code: string): ts.NodeArray<ts.Statement>;
    /**
     * template to statments ast.
     * @param fileName
     * @returns
     */
    static buildAstFromTemplate(fileName: string): ts.NodeArray<ts.Statement>;
    /**
     * Instrument BjcCov class and new instance.
     * @param node
     * @param clsName
     * @param objName
     * @param coverageData
     */
    static instrumentBjcCovCls(node: ts.SourceFile, objName: string, coverageData: any): ts.SourceFile;
    /**
     * Instrument import ohos.file.fs
     * import bjc_fs from '@ohos.file.fs';
     * @param node
     */
    static instrumentImportOhosFs(node: ts.SourceFile): ts.SourceFile;
    static instumentImportHilog(node: ts.SourceFile): ts.SourceFile;
    /**
     * Instrument process.on('exit') hook to file
     * @param node
     */
    static instrumentProcessExitEvent(node: ts.SourceFile): ts.SourceFile;
    static parseClassDeclaration(clsNode: ts.ClassDeclaration): BjcCls;
    static handlePropertyAccessExpression(node: any): string;
    static shouldIgnoreNode(node: ts.Node, sourceFile: ts.SourceFile): IgnoreType;
    static markNodeIgnored(node: any, ignoreType: IgnoreType, recursive?: boolean): void;
    static hashNodeContent(node: ts.Node): string;
}
