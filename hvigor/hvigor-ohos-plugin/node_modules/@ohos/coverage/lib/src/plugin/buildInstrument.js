"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSurroundedByCurlyBrace = exports.buildInstrument = void 0;
const path = require("path");
const bjc_1 = require("../bjc");
const globals_1 = require("./globals");
const log4js = require("log4js");
const fs = require("fs");
const os = require("os");
const logger = log4js.getLogger();
const BUILD = 'build';
const DOT_TEST = '.test';
const SRC = 'src';
const OHOSTEST = 'ohosTest';
const TEST = 'test';
const MOCK = 'mock';
const OH_MODULES = 'oh_modules';
const LEFT_CURLY_BRACE = '{';
const RIGHT_CURLY_BRACE = '}';
const UTF_8 = 'utf-8';
/**
 * 测试框架代码覆盖率收集代码插装插装 (编译构建调用)
 * @param projectConfig
 */
const buildInstrument = () => {
    return {
        name: 'buildInstrument',
        buildStart: buildStart,
        transform: transform,
        shouldInvalidCache: shouldInvalidCache,
        beforeBuildEnd: beforeBuildEnd
    };
};
exports.buildInstrument = buildInstrument;
let flag;
/**
 * 功能：
 * @param {any} this
 */
async function buildStart() {
    const cacheNeedCoverageInsert = this.cache.get('needCoverageInsert');
    flag = cacheNeedCoverageInsert !== this.share.projectConfig.needCoverageInsert;
    this.cache.set('needCoverageInsert', this.share.projectConfig.needCoverageInsert);
}
/**
 * 功能：
 * @param {any} this
 * @param {string} code
 * @param {string} id
 * @returns
 */
async function transform(code) {
    return {
        code: code,
        map: null,
    };
}
async function shouldInvalidCache() {
    return flag;
}
async function beforeBuildEnd() {
    var _a;
    const moduleArr = this.share.ModuleSourceFile;
    if (!moduleArr) {
        return;
    }
    const projectConfig = this.share.projectConfig;
    const testMode = projectConfig.testFrameworkPar.testMode;
    let testModePath = testMode === 'ohosTest' ? 'ohosTest' : 'test';
    let modulePath = projectConfig.modulePath;
    let initCoverageJsonPath = path.join(modulePath, '.test/default/intermediates', testModePath, 'init_coverage.json');
    unquoteInitCoverageJson(initCoverageJsonPath);
    if (!projectConfig.needCoverageInsert) {
        return;
    }
    const etsLoaderPath = projectConfig.etsLoaderPath;
    try {
        globals_1.Globals.tsc = require(path.join(etsLoaderPath, 'node_modules/typescript'));
    }
    catch (e) {
        logger.error('typescript not found in the environment');
        return;
    }
    const projectPath = projectConfig.projectTopDir;
    const filterPathList = getFilterPathList(projectPath, modulePath);
    for (const module of moduleArr) {
        if (!module.isSourceNode) {
            continue;
        }
        if (needToFilter(module, filterPathList)) {
            continue;
        }
        let coverageMode = (_a = projectConfig.testFrameworkPar) === null || _a === void 0 ? void 0 : _a.coverageMode;
        coverageMode = coverageMode ? coverageMode : bjc_1.CoverageMode.WHITE;
        module.source = astTransform(module.source, projectPath, coverageMode, modulePath, testMode);
    }
    quoteInitCoverageJson(initCoverageJsonPath);
}
function quoteInitCoverageJson(initCoverageJsonPath) {
    if (!fs.existsSync(initCoverageJsonPath)) {
        return;
    }
    let initCoverageJson = fs.readFileSync(initCoverageJsonPath, UTF_8);
    if (isSurroundedByCurlyBrace(initCoverageJson)) {
        return;
    }
    initCoverageJson = LEFT_CURLY_BRACE + os.EOL + initCoverageJson + os.EOL + RIGHT_CURLY_BRACE;
    fs.writeFileSync(initCoverageJsonPath, initCoverageJson, UTF_8);
}
function unquoteInitCoverageJson(initCoverageJsonPath) {
    if (!fs.existsSync(initCoverageJsonPath)) {
        return;
    }
    let initCoverageJson = fs.readFileSync(initCoverageJsonPath, UTF_8);
    if (isSurroundedByCurlyBrace(initCoverageJson)) {
        initCoverageJson = initCoverageJson.substring(1, initCoverageJson.length - 1).trim();
        fs.writeFileSync(initCoverageJsonPath, initCoverageJson, UTF_8);
    }
}
function isSurroundedByCurlyBrace(initCoverageJson) {
    return initCoverageJson.startsWith(LEFT_CURLY_BRACE) && initCoverageJson.endsWith(RIGHT_CURLY_BRACE);
}
exports.isSurroundedByCurlyBrace = isSurroundedByCurlyBrace;
function getFilterPathList(projectPath, modulePath) {
    const moduleBuildPath = modulePath + path.sep + BUILD;
    const moduleTestPath = modulePath + path.sep + DOT_TEST;
    const ohosTestPath = modulePath + path.sep + SRC + path.sep + OHOSTEST;
    const localTestPath = modulePath + path.sep + SRC + path.sep + TEST;
    const moduleMockPath = modulePath + path.sep + SRC + path.sep + MOCK;
    const projectOhModulesPath = projectPath + path.sep + OH_MODULES;
    const moduleOhModulesPath = modulePath + path.sep + OH_MODULES;
    return [moduleBuildPath, moduleTestPath, ohosTestPath, localTestPath, moduleMockPath, projectOhModulesPath, moduleOhModulesPath];
}
function needToFilter(module, filterPathList) {
    for (const filterPath of filterPathList) {
        if (module.moduleId.includes(filterPath)) {
            return true;
        }
    }
    return false;
}
function astTransform(ast, projectTopDir, coverageMode, modulePath, testMode) {
    const aa = globals_1.Globals.tsc.transform(ast, [
        (0, bjc_1.bjcTransformer)({ projectTopDir: projectTopDir, coverageMode: coverageMode, modulePath, testMode })
    ]);
    return aa.transformed[0];
}
