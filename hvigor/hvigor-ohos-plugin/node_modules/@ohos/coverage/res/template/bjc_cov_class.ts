class BjcCov {
  coverage: {
    [key: string]: string | number;
  };
  constructor(covData: any) {
    const gcv = '__coverage__';
    let coverage = globalThis[gcv] || (globalThis[gcv] = {});
    if (!coverage[covData.path] || !(coverage[covData.path].hash != covData.hash)) {
      coverage[covData.path] = covData;
    }
    this.coverage = coverage[covData.path];
  }
  instrumentFunction(func: number) {
    this.coverage.functions[func].count++;
    this.coverage.functions[func].regions[0].count++;
  }
  instrumentRegion(func: number, region: number) {
    this.coverage.functions[func].regions[region].count++;
  }
  instrumentReturn(func: number, retIdx: number) {
    this.coverage.functions[func].returnes[retIdx].count++;
  }
  instrumentBranch(func: number, branch: number, trueOrFalse: boolean) {
    if (trueOrFalse) {
      this.coverage.functions[func].branches[branch].trueCount++;
      for (let r of Object.values(this.coverage.functions[func].branches[branch].group)) {
        if (r != branch) {
          this.coverage.functions[func].branches[r as number].falseCount++;
        }
      }
    } else {
      this.coverage.functions[func].branches[branch].falseCount++;
    }
  }
}
